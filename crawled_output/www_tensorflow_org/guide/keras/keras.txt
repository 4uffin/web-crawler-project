Keras: The high-level API for TensorFlow  |  TensorFlow Core
Skip to main content
Install
Learn
Introduction
New to TensorFlow?
Tutorials
Learn how to use TensorFlow with end-to-end examples
Guide
Learn framework concepts and components
Learn ML
Educational resources to master your path with TensorFlow
API
TensorFlow (v2.16.1)
Versions…
TensorFlow.js
TensorFlow Lite
TFX
Ecosystem
LIBRARIES
TensorFlow.js
Develop web ML applications in JavaScript
TensorFlow Lite
Deploy ML on mobile, microcontrollers and other edge devices
TFX
Build production ML pipelines
All libraries
Create advanced models and extend TensorFlow
RESOURCES
Models & datasets
Pre-trained models and datasets built by Google and the community
Tools
Tools to support and accelerate TensorFlow workflows
Responsible AI
Resources for every stage of the ML workflow
Recommendation systems
Build recommendation systems with open source tools
Community
Groups
User groups, interest groups and mailing lists
Contribute
Guide for contributing to code and documentation
Blog
Stay up to date with all things TensorFlow
Forum
Discussion platform for the TensorFlow community
Why TensorFlow
About
Case studies
/
English
Español
Español – América Latina
Français
Indonesia
Italiano
Polski
Português
Português – Brasil
Tiếng Việt
Türkçe
Русский
עברית
العربيّة
فارسی
हिंदी
বাংলা
ภาษาไทย
中文 – 简体
中文 – 繁體
日本語
한국어
GitHub
Sign in
TensorFlow Core
Tutorials
Guide
Migrate to TF2
TF 1 ↗
Install
Learn
More
Tutorials
Guide
Migrate to TF2
TF 1 ↗
API
More
Ecosystem
More
Community
More
Why TensorFlow
More
GitHub
TensorFlow guide
TensorFlow basics
Overview
Tensors
Variables
Automatic differentiation
Graphs and functions
Modules, layers, and models
Training loops
Keras
Overview
The Sequential model
The Functional API
Training & evaluation with the built-in methods
Making new layers and models via subclassing
Serialization and saving
Customizing Saving
Working with preprocessing layers
Customizing what happens in fit()
Writing a training loop from scratch
Working with RNNs
Understanding masking & padding
Writing your own callbacks
Transfer learning & fine-tuning
Multi-GPU and distributed training
Build with Core
Overview
Quickstart for Core
Logistic regression
Multilayer perceptrons
Matrix approximation
Custom optimizers
DTensor with Core APIs
TensorFlow in depth
Tensor slicing
Advanced autodiff
Ragged tensor
Sparse tensor
Random number generation
NumPy API
NumPy API Type Promotion
DTensor concepts
Thinking in TensorFlow 2
Customization
Create an op
Extension types
Data input pipelines
tf.data
Optimize pipeline performance
Analyze pipeline performance
Import and export
Checkpoint
SavedModel
Import a JAX model using JAX2TF
Accelerators
Distributed training
GPU
TPU
Performance
Better performance with tf.function
Profile TensorFlow performance
Optimize GPU Performance
Graph optimization
Mixed precision
Model Garden
Overview
Training with Orbit
TFModels - NLP
Example: Image classification
Example: Object Detection
Example: Semantic Segmentation
Example: Instance Segmentation
Estimators
Estimator overview
Appendix
Version compatibility
Introduction
Tutorials
Guide
Learn ML
TensorFlow (v2.16.1)
Versions…
TensorFlow.js
TensorFlow Lite
TFX
LIBRARIES
TensorFlow.js
TensorFlow Lite
TFX
All libraries
RESOURCES
Models & datasets
Tools
Responsible AI
Recommendation systems
Groups
Contribute
Blog
Forum
About
Case studies
TensorFlow
Learn
TensorFlow Core
Guide
Keras: The high-level API for TensorFlow
Stay organized with collections
Save and categorize content based on your preferences.
Keras is the high-level API of the TensorFlow platform. It provides an
approachable, highly-productive interface for solving machine learning (ML)
problems, with a focus on modern deep learning. Keras covers every step of the
machine learning workflow, from data processing to hyperparameter tuning to
deployment. It was developed with a focus on enabling fast experimentation.
With Keras, you have full access to the scalability and cross-platform
capabilities of TensorFlow. You can run Keras on a TPU Pod or large clusters of
GPUs, and you can export Keras models to run in the browser or on mobile
devices. You can also serve Keras models via a web API.
Keras is designed to reduce cognitive load by achieving the following goals:
Offer simple, consistent interfaces.
Minimize the number of actions required for common use cases.
Provide clear, actionable error messages.
Follow the principle of progressive disclosure of complexity: It's easy to get
started, and you can complete advanced workflows by learning as you go.
Help you write concise, readable code.
Who should use Keras
The short answer is that every TensorFlow user should use the Keras APIs by
default. Whether you're an engineer, a researcher, or an ML practitioner, you
should start with Keras.
There are a few use cases (for example, building tools on top of TensorFlow or
developing your own high-performance platform) that require the low-level
TensorFlow Core APIs. But if your use
case doesn't fall into one
of the
Core API applications,
you should prefer Keras.
Keras API components
The core data structures of Keras are layers and
models. A layer is a simple input/output
transformation, and a model is a directed acyclic graph (DAG) of layers.
Layers
The tf.keras.layers.Layer class is the fundamental abstraction in Keras. A
Layer encapsulates a state (weights) and some computation (defined in the
tf.keras.layers.Layer.call method).
Weights created by layers can be trainable or non-trainable. Layers are
recursively composable: If you assign a layer instance as an attribute of
another layer, the outer layer will start tracking the weights created by the
inner layer.
You can also use layers to handle data preprocessing tasks like normalization
and text vectorization. Preprocessing layers can be included directly into a
model, either during or after training, which makes the model portable.
Models
A model is an object that groups layers together and that can be trained on
data.
The simplest type of model is the
Sequential model,
which is a linear stack of layers. For more complex architectures, you can
either use the
Keras functional API,
which lets you build arbitrary graphs of layers, or
use subclassing to write models from scratch.
The tf.keras.Model class features built-in training and evaluation methods:
tf.keras.Model.fit: Trains the model for a fixed number of epochs.
tf.keras.Model.predict: Generates output predictions for the input samples.
tf.keras.Model.evaluate: Returns the loss and metrics values for the model;
configured via the tf.keras.Model.compile method.
These methods give you access to the following built-in training features:
Callbacks.
You can leverage built-in callbacks for early stopping, model checkpointing,
and TensorBoard monitoring. You can
also
implement custom callbacks.
Distributed training.
You can easily scale up your training to multiple GPUs, TPUs, or devices.
Step fusing. With the steps_per_execution argument in
tf.keras.Model.compile, you can process multiple batches in a single
tf.function call, which greatly improves device utilization on TPUs.
For a detailed overview of how to use fit, see the
training and evaluation guide.
To learn how to customize the built-in training and evaluation loops, see
Customizing what happens in fit().
Other APIs and tools
Keras provides many other APIs and tools for deep learning, including:
Optimizers
Metrics
Losses
Data loading utilities
For a full list of available APIs, see the
Keras API reference. To learn more about other Keras
projects and initiatives, see
The Keras ecosystem.
Next steps
To get started using Keras with TensorFlow, check out the following topics:
The Sequential model
The Functional API
Training & evaluation with the built-in methods
Making new layers and models via subclassing
Serialization and saving
Working with preprocessing layers
Customizing what happens in fit()
Writing a training loop from scratch
Working with RNNs
Understanding masking & padding
Writing your own callbacks
Transfer learning & fine-tuning
Multi-GPU and distributed training
To learn more about Keras, see the following topics at
keras.io:
About Keras
Introduction to Keras for Engineers
Introduction to Keras for Researchers
Keras API reference
The Keras ecosystem
Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.
Last updated 2023-06-08 UTC.
Stay connected
Blog
Forum
GitHub
Twitter
YouTube
Support
Issue tracker
Release notes
Stack Overflow
Brand guidelines
Cite TensorFlow
Terms
Privacy
Manage cookies
Sign up for the TensorFlow newsletter
Subscribe
English
Español
Español – América Latina
Français
Indonesia
Italiano
Polski
Português
Português – Brasil
Tiếng Việt
Türkçe
Русский
עברית
العربيّة
فارسی
हिंदी
বাংলা
ภาษาไทย
中文 – 简体
中文 – 繁體
日本語
한국어