Type-safe routing with less code in React - DEV Community
Forem Feed
Follow new Subforems to improve your feed
DEV Community
Follow
A space to discuss and keep up software development and manage your software career
Gamers Forem
Follow
An inclusive community for gaming enthusiasts
Future
Follow
News and discussion of science and technology such as AI, VR, cryptocurrency, quantum computing, and more.
Music Forem
Follow
From composing and gigging to gear, hot music takes, and everything in between.
DUMB DEV Community
Follow
Memes and software development shitposting
Vibe Coding Forem
Follow
Discussing AI software development, and showing off what we're building.
Popcorn Movies and TV
Follow
Movie and TV enthusiasm, criticism and everything in-between.
Design Community
Follow
Web design, graphic design and everything in-between
Maker Forem
Follow
A community for makers, hobbyists, and professionals to discuss Arduino, Raspberry Pi, 3D printing, and much more.
Scale Forem
Follow
For engineers building software at scale. We discuss architecture, cloud-native, and SREâ€”the hard-won lessons you can't just Google
Forem Core
Follow
Discussing the core forem open source software project â€” features, bugs, performance, self-hosting.
Crypto Forem
Follow
A collaborative community for all things Cryptoâ€”from Bitcoin to protocol development and DeFi to NFTs and market analysis.
Dropdown menu
Dropdown menu
Skip to content
Navigation menu
Search
Powered by Algolia
Search
Log in
Create account
DEV Community
Close
Add reaction
Like
Unicorn
Exploding Head
Raised Hands
Fire
Jump to Comments
Save
Boost
More...
Moderate
Copy link
Copy link
Copied to Clipboard
Share to X
Share to LinkedIn
Share to Facebook
Share to Mastodon
Report Abuse
axtk
Posted on Sep 12
Type-safe routing with less code in React
#react
#webdev
#typescript
#javascript
In a recent post, I had a code example showcasing a concise way to do routing in React. One of its features is a ternary routing function withRoute(routePattern, x, y) acting similarly to the ternary conditional operator matchesRoutePattern ? x : y which works equally with components and prop values:
<nav className={withRoute('/', 'full', 'compact')}>
Enter fullscreen mode
Exit fullscreen mode
{withRoute('/', <Intro/>)}
{withRoute(/^\/sections\/(?<id>\d+)\/?$/, ({params}) => (
<Section id={params.id}/>
))}
Enter fullscreen mode
Exit fullscreen mode
In this code, the params type has a generic shape of Record<string, string | undefined> of an object containing string portions of a string URL. It's sufficient in many cases, but sometimes we might wish for preciser typing. For example, in the code above, params.id matches the pattern of \d+, so it could be an actual number rather than a string.
The discussed approach to routing, in fact, allows for gradual adoption of stricter route typing by defining partial URL schemas scaling up from a single component to the entire app.
Let's define a URL schema for our code example to make sure that params.id is typed as a number, and the root URL doesn't accept any params at all:
import {A, useRoute} from '@t8/react-router';
import {createURLSchema} from 'url-shape';
import {z} from 'zod';
const {url} = createURLSchema({
'/': null, // goes without parameters
'/sections/:id': {
params: z.object({
id: z.coerce.number(),
}),
},
});
let App = () => {
let {withRoute} = useRoute();
// `withRoute(routePattern, x, y)` acts similarly to
// `matchesRoutePattern ? x : y`
return (
<>
<nav className={withRoute(url('/'), 'full', 'compact')}>
<A href={url('/')}>
Intro
</A>{' '}
<A href={url('/sections/:id', {params: {id: 1}})}>
Section 1
</A>
</nav>
{withRoute(url('/'), <Intro/>)}
{withRoute(url('/sections/:id'), ({params}) => (
<Section id={params.id}/>
))}
</>
);
};
Enter fullscreen mode
Exit fullscreen mode
Note that the shapes of the components and the routing function withRoute() remain the same. All what's changed inside the component is that the string and RegExp URL patterns were replaced with the typed URL builder url(). It's using these typed route patterns that makes params.id to be now resolved as a number, and that the route shapes comply with the zod-powered URL schema. (Hover over params and id in the sandbox example to see these types for yourself.)
Although not a requirement, we might want to cover the entire app with type-safe routes. Once we've done that, we might want to disallow plain string and RegExp URLs and URL patterns created outside the URL builder (the url() function) altogether to enforce type-safe routing further on. This can be done by overriding the router's type config in our app's code:
declare module '@t8/react-router' {
interface Config {
strict: true;
}
}
Enter fullscreen mode
Exit fullscreen mode
But this is completely optional. Regardless of this setting, the URL schema doesn't have to defined in a single place, there can be multiple partial URL schemas representing certain portions of the app. This incremental approach to type-safe routing, from a partial URL schema to strict application-wide type safety, makes it easier to adopt and maintain, without impairing the conciseness of the routing code.
This is essentially all what's required to set up type-safe routes with this pretty minimalist approach to routing. See also the package overview for more details on its other aspects.
Top comments (0)
Subscribe
Personal
Trusted User
Create template
Templates let you quickly answer FAQs or store snippets for re-use.
Submit
Preview
Dismiss
Code of Conduct
â€¢
Report abuse
Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
Hide child comments as well
Confirm
For further actions, you may consider blocking this person and/or reporting abuse
axtk
Follow
~
Joined
Mar 23, 2025
More from axtk
Fractal web app design
#webdev
#node
#javascript
#typescript
Lightweight pending state handling in React
#react
#webdev
#typescript
#javascript
Routing with less code in React
#react
#webdev
#typescript
#javascript
ðŸ’Ž DEV Diamond Sponsors
Thank you to our Diamond Sponsors for supporting the DEV Community
Google AI is the official AI Model and Platform Partner of DEV
Neon is the official database partner of DEV
Algolia is the official search partner of DEV
DEV Community â€” A space to discuss and keep up software development and manage your software career
Home
DEV++
Reading List
Podcasts
Videos
Tags
DEV Education Tracks
DEV Challenges
DEV Help
Advertise on DEV
DEV Showcase
About
Contact
Free Postgres Database
Software comparisons
Forem Shop
Code of Conduct
Privacy Policy
Terms of Use
Built on Forem â€” the open source software that powers DEV and other inclusive communities.
Made with love and Ruby on Rails. DEV Community Â© 2016 - 2025.
We're a place where coders share, stay up-to-date and grow their careers.
Log in
Create account