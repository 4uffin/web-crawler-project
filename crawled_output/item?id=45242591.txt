OCSP Service Has Reached End of Life | Hacker NewsHacker Newsnew | past | comments | ask | show | jobs | submitloginOCSP Service Has Reached End of Life (letsencrypt.org)97 points by pfexec 4 hours ago
| hide | past | favorite | 20 comments
sugarpimpdorsey 28 minutes ago
| next [–]
This will not impact Chrome in any meaningful way because - in typical Google fashion - they invented their own bullshit called CRLSets that does not perform OCSP or CRL checks in any way, rather periodically downloads a preened blacklist from Google which it then uses to screen certificates.Most people don't realize this.It's quite insane given that Chrome will by default not check CRLs *at all* for internal, enterprise CAs.replystusmall 1 minute ago
| parent | next [–]
What in the Sam Hill? This is a new one on me.
Does anyone have any reading for their logic of why?replylol768 2 hours ago
| prev | next [–]
The ship has very much sailed now with ballot SC63, and this is the result, but I still don't think CRLs are remotely a perfect solution (nor do I think OCSP was unfixable). You run into so many problems with the size of them, the updates not propagating immediately etc. It's just an ugly solution to the problem, that you then have to introduce further hacks (Bloom filters) atop of it all to make the whole mess work. I'm glad that Mozilla have done lots of work in this area with CRLite, but it does all feel like a bodge.The advantages of OCSP were that you got a real-time understanding of the status of a certificate and you had no need to download large CRLs which become stale very quickly. If you set security.ocsp.require in the browser appropriately then you didn't have any risk of the browser failing open, either. I did that in the browser I was daily-driving for years and can count on one hand the number of times I ran into OCSP responder outages.The privacy concerns could have been solved through adoption of Must-Staple, and you could then operate the OCSP responders purely for web-servers and folks doing research.And let's not pretend users aren't already sending all the hostnames they are visiting to their selected DNS server. Why is that somehow okay, but OCSP not?replyekr____ 1 hour ago
| parent | next [–]
The problem with requiring OCSP stapling is that it's not practically enforceable without breakage.The underlying dynamics of any change to the Web ecosystem is that it has to be incrementally deployable, in the sense that when element A changes it doesn't experience breakage with the existing ecosystem. At present, approximately no Web servers do OCSP stapling, so any browser which requires it will just not work. In the past, when browsers want to make changes like this, they have had to give years of warning and then they can only actually make the change once nearly the entire
ecosystem has switched and so you have minimal breakage. This is a huge effort an only worth doing when you have a real problem.As a reference point, it took something like 7 years to disable SHA-1 in browsers [0], and that was an easier problem because (1) CAs were already transitioning (2) it didn't require any change to the servers, unlike OCSP stapling which requires them to regularly fetch OCSP responses [1] and (3) there was a clear security reason to make the change. By contrast, with Firefox's introduction of CRLite, all the major browsers now have some central revocation system, which works today as opposed to years from now and doesn't require any change to the servers.[0] https://security.googleblog.com/2014/09/gradually-sunsetting...
[1] As an aside it's not clear that OCSP stapling is better than short-lived certs.replylol768 40 minutes ago
| root | parent | next [–]
I think you are correct. There were similar issues with Firefox rolling out SameSite=Lax by default, and I think those plans are now indefinitely on hold as a result of the breakage it caused. It's a hard problem to solve.> As an aside it's not clear that OCSP stapling is better than short-lived certs.I agree this should be the end goal, really.replywoodruffw 43 minutes ago
| parent | prev | next [–]
> Why is that somehow okay, but OCSP not?I think the argument isn’t that it’s okay, but that one bad thing doesn’t mean we should do two bad things. Just because my DNS provider can see my domain requests doesn’t mean I also want arbitrary CAs on the Internet to also see them.replyPunchyHamster 16 minutes ago
| parent | prev | next [–]
It's funny that putting some random records in DNS is enough to have enough "ownership" to make a cert for one but we can't use same method for publishing
revokingreplyocdtrekkie 4 minutes ago
| root | parent | next [–]
The entire existence of CAs is a pointless and mystical venture to ensure centralized control of the Internet that, since now entirely domain-validated, provides absolutely no security benefits over DNS. If your domain register/name server provider is compromised, CAs are already a lost cause.replyzahlman 32 minutes ago
| prev | next [–]
Does this mean I should turn "security.OCSP.require" back off in Firefox?replyGauntletWizard 2 hours ago
| prev [–]
Ocsp has always represented a terrible design. If clients require it, then it becomes just a override on the not after date included in the certificate, that requires online access to the cert server. If it is not required, then it is useless, because blocking the ocsp responses is well within the capabilities of any man in the middle attack, and makes the servers themselves DDOS attack targets.The alternative to the privacy nightmare is ocsp stapling, which has the first problem once again - it adds complexity to the protocol just to add an override of the not after attribute, when the not after attribute could be updated just as easily with the original protocol, reissuing the certificate. It was a Band-Aid on the highly manual process of certain issuance that once dominated the space.Good riddance to ocsp, I for one will not miss it.replytgsovlerkhgsel 42 minutes ago
| parent | next [–]
Shortening the certificate lifespan to e.g. 24h would have a number of downsides:Certificate volume in Certificate Transparency would increase a lot, adding load to the logs and making it even harder to follow CT.Issues with domain validation would turn into an outage after 24h rather than when the cert expires, which could be a benefit in some cases (invalidating old certs quickly if a domain changes owner or is recovered after a compromise/hijack).OCSP is simpler and has fewer dependencies than issuance (no need to do multi-perspective domain validation and the interaction with CT), so keeping it highly available should be easier than keeping issuance highly available.With stapling (which would have been required for privacy) often poorly implemented and rarely deployed and browsers not requiring OCSP, this was a sensible decision.replytptacek 33 minutes ago
| root | parent | next [–]
Well, OCSP is dead, so the real argument is over how low certificate lifetimes will be, not whether or not we might make a go of OCSP.replycharcircuit 15 minutes ago
| root | parent | prev | next [–]
>would increase a lotYou can delete old logs or come up with a way to download the same thing with less disk space. Even if the current architecture does not scale we can always change it.>even harder to follow CT.It should be no harder to follow than before.replyjeroenhd 1 hour ago
| parent | prev | next [–]
OCSP stapling was a good solution in the age of certificates that were valid for 10 years (which was the case for basic HTTPS certificates back in 2011 when OCSP stapling was introduced). In the age of 90 day certificates (to be reduced to a maximum of 47 days in a few years), it's not quite as necessary any more, but I don't think OCSP stapling is that problematic a solution.Certificates in air-gapped networks are problematic, but that problem can be solved with dedicated CRL-only certificate roots that suffer all of the downsides of CRLs for cases where OCSP stapling isn't available.Nobody will miss OCSP now that it's dead, but assuming you used stapling I think it was a decent solution to a difficult problem that plagued the web for more than a decade and a half.replytremon 1 hour ago
| root | parent | next [–]
But that 47-day lifetime is enforced by the certificate authority, not by the browser, right? So a bad actor can still issue a multi-year certificate for itself, and in the absence of side-channel verification the browser is none the wiser. Or will browsers be instructed to reject long-lived certificates under specific conditions?replysugarpimpdorsey 42 minutes ago
| root | parent | next [–]
Wrong. Enforcement is done by the browser. Yes, a CA's certificate policy may govern how long a certificate they will issue. But should an error occur, and a long-lived cert issued (even maliciously), the browser will reject it.The browser-CA cartels stay relatively in sync.You can verify this for yourself by creating and trusting a local CA and try issuing a 5 year certificate. It won't work. You'll have a valid cert, but it won't be trusted by the browser unless the lifetime is below their arbitrary limit. Yet that certificate would continue to be valid for non-browser purposes.replyavianlyric 59 minutes ago
| root | parent | prev | next [–]
> So a bad actor can still issue a multi-year certificate for itself, and in the absence of side-channel verification the browser is none the wiser.How would a bad actor do that without a certificate authority being involved?replyarccy 1 hour ago
| root | parent | prev | next [–]
the browsers will verify, and every cert will be checked against transparency logs. you won't be able to hide a long lived cert for very long.replylayer8 1 hour ago
| parent | prev [–]
> the not after attribute could be updated just as easily with the original protocol, reissuing the certificate.That's not a viable solution if the server you want to verify is compromised. The point of CRL and OCSP is exactly to ask the authority one higher up, without the entity you want to verify being able to interfere.In non-TLS uses of X.509 certificates, OCSP is still very much a thing, by the way, as there is no real alternative for longer-lived certificates.replyarccy 1 hour ago
| root | parent [–]
actually that's pretty close to where we're going with ever shorter certificate lifetimes...reply
Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact
Search: