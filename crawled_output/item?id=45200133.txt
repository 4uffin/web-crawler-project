Introduction to GrapheneOS | Hacker NewsHacker Newsnew | past | comments | ask | show | jobs | submitloginIntroduction to GrapheneOS (dataswamp.org)29 points by renehsz 3 hours ago
| hide | past | favorite | 13 comments
yjftsjthsd-h 1 hour ago
[–]
> GOS does not allow you to become root on your phone though, it just gives you more control through permissions and profiles.It really is sad that there isn't any ROM with Graphene's permission and sandboxing features while still leaving the user in control. IIRC it's theoretically possible since they publish the code, but one assumes it would be a non-trivial effort:\replycrapple8430 23 minutes ago
| parent | next [–]
You can root GrapheneOS just fine. Moreover you can even re-lock the bootloader after rooting.See: github.com/chenxiaolong/avbrootreplysubscribed 26 minutes ago
| parent | prev | next [–]
Okay, but it's very easy for you to build and sign your own builds that provide root access to the user.I dint understand why you insist on this massive risk to be laid on on everyone.GOS publishes pretty detailed documentation. They don't explain step by step how to build an OS with root specifically, instead assuming that the users knowing the immense risks also have the skils they need to achieve it without handholding.replyjampekka 14 minutes ago
| root | parent | next [–]
If the risks are so immense, surely we shouldn't be allowed root on our laptops either?replybornfreddy 8 minutes ago
| root | parent | next [–]
Pssst, quiet, don't give them any ideas... :-/replypaulhart 7 minutes ago
| root | parent | prev | next [–]
That's a Chromebook, no?replysfdlkj3jk342a 13 minutes ago
| root | parent | prev | next [–]
They actually do include how to do it in their official build guide.
Just change the build target from -user to -userdebug.
All other steps remain the same.
That will give you adb root access.replyranger_danger 1 hour ago
| parent | prev [–]
If you have the UI layer able to grant root access, it has root access itself and is not sandboxed. If the UI layer can grant it, an attacker gaining slight control over it has root access. An accessibility service trivially has root access. A keyboard can probably get root access, and so on. Instead of a tiny little portion of the OS having root access, a massive portion of it does.In the verified boot threat model, an attacker controls persistent state. If you have persistent root access as a possibility then verified boot doesn't work since persistent state is entirely trusted.A userdebug build of AOSP or GrapheneOS has a su binary and an adb root command providing root access via the Android Debug Bridge via physical access using USB. This does still significantly reduce security, particularly since ADB has a network mode that can be enabled. Most of the security model is still intact. This is not what people are referring to when they talk about rooting on Android, they are referring to granting root access to apps via the UI not using it via a shell.replycakealert 51 minutes ago
| root | parent | next [–]
> If you have the UI layer able to grant root access, it has root access itself and is not sandboxed.The same is true even of an operating system such as QubesOS. And it's a minimal risk.Not providing optional root access on GOS makes it only useful if you have a constrained application in mind for the phone. I don't have time to compile GOS with root so I just use LineageOS instead.replyyjftsjthsd-h 1 hour ago
| root | parent | prev | next [–]
EDIT: This is a reply to the 2nd(?) version of your comment before it was silently changed into something different.Yes, I'm sure it is. But I don't consider that a tolerable tradeoff, and I believe we could have a system that has most of the best of both worlds.replyyjftsjthsd-h 48 minutes ago
| root | parent | prev [–]
Quoting inline since parent has been rewritten multiple times now...> If you have the UI layer able to grant root access, it has root access itself and is not sandboxed. If the UI layer can grant it, an attacker gaining slight control over it has root access. An accessibility service trivially has root access. A keyboard can probably get root access, and so on. Instead of a tiny little portion of the OS having root access, a massive portion of it does.Android has an established way to handle permission dialogs that require the user to confirm their approval, including use of fingerprint/PIN/password to authenticate. If it's good enough to unlock and decrypt the device, it's good enough to control root access. Besides which, I think> An accessibility service trivially has root access.is hitting https://xkcd.com/1200/ ; an a11y service already has access to everything inside the sandbox (including all your sensitive data), and the system settings that control permissions and sandboxing.> In the verified boot threat model, an attacker controls persistent state. If you have persistent root access as a possibility then verified boot doesn't work since persistent state is entirely trusted.I'm tentatively willing to agree, but I don't see the point? 1. If an attacker controls persistent state, don't they already control all the other permissions, including what security domains exist and what permissions are given to apps. 2. You don't have to persist it; even just one-off root access is quite useful.> A userdebug build of AOSP or GrapheneOS has a su binary and an adb root command providing root access via the Android Debug Bridge via physical access using USB. This does still significantly reduce security, particularly since ADB has a network mode that can be enabled. Most of the security model is still intact. This is not what people are referring to when they talk about rooting on Android, they are referring to granting root access to apps via the UI not using it via a shell.Agreed, that's not what I want.replyranger_danger 27 minutes ago
| root | parent [–]
> Android has an established way to handle permission dialogs that require the user to confirm their approvalWith the advent of choicejacking I don't think I want to trust permission dialogs anymore.> including use of fingerprint/PIN/password to authenticateIMO if you have the UI layer able to grant root access at all, even with requiring re-authentication, it still already has root access itself and is therefore not sandboxed.replyyjftsjthsd-h 1 minute ago
| root | parent [–]
> With the advent of choicejacking I don't think I want to trust permission dialogs anymore.So you're using a version of Android patched to remove all permissions? After all, in your threat model all apps can get permission to use the microphone and camera, make phone calls, access fine-grained location information, read and write files at will, etc. Frankly, I'm not sure what they'd get out of root at this point.> IMO if you have the UI layer able to grant root access at all, even with requiring re-authentication, it still already has root access itself and is therefore not sandboxed.Likewise, surely this applies to any permission system, and every other permission. The system UI controls every other permission in the system; if we assume it compromised, then everything else is already lost.
Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact
Search: