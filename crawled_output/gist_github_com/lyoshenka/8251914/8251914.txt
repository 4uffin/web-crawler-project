Search Git commit history for a string and see the diffs Â· GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
SignÂ in
SignÂ up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
lyoshenka/search-git-history.md
Last active
September 17, 2025 18:15
Show Gist options
Download ZIP
Star
94
(94)
You must be signed in to star a gist
Fork
17
(17)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/lyoshenka/8251914.js&quot;&gt;&lt;/script&gt;
Save lyoshenka/8251914 to your computer and use it in GitHub Desktop.
Code
Revisions
3
Stars
94
Forks
17
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/lyoshenka/8251914.js&quot;&gt;&lt;/script&gt;
Save lyoshenka/8251914 to your computer and use it in GitHub Desktop.
Download ZIP
Search Git commit history for a string and see the diffs
Raw
search-git-history.md
Searching Git commit history
This should be one of the core features of Git, but for some reason it's impossible to figure out how to search for a string in your commit history and see the diffs that that string is in. Here's the best I've come up with:
To find which commits and which files a string was added or removed in:
git log -S'search string' --oneline --name-status
To see the diff of that
git log -S'search string' -p | grep 'search string' -C5
You can also do a regex search by using -G instead of -S.
Copy link
benknoble
commented
Oct 5, 2018
log takes a patch-with-stat option
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
raedbenz
commented
Jan 4, 2019
https://stackoverflow.com/a/2929502/1912383
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Copy link
0xdevalias
commented
Jun 22, 2021
â€¢
edited
Loading
Uh oh!
There was an error while loading. Please reload this page.
On that same StackOverflow issue that @raedbenz linked, there is a better answer that basically suggests the same -S 'pickaxe' method described here + goes into some more details about it's usage:
https://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history/2928721#2928721
Since I always find myself ending up back on this gist, here are the methods described in that StackOverflow:
You should use the pickaxe (-S) option of git log.
To search for Foo:
git log -SFoo -- path_containing_change
git log -SFoo --since=2009.1.1 --until=2010.1.1 -- path_containing_change
See Git history - find lost line by keyword for more.
As Jakub NarÄ™bski commented:
this looks for differences that introduce or remove an instance of <string>. It usually means "revisions where you added or removed line with 'Foo'".
the --pickaxe-regex option allows you to use extended POSIX regex instead of searching for a string. Example (from git log): git log -S"frotz\(nitfol" --pickaxe-regex
As Rob commented, this search is case-sensitive - he opened a follow-up question on how to search case-insensitive.
Looking at the StackOverflow for case-insensitive pickaxes search:
https://stackoverflow.com/questions/25384842/case-insensitive-git-pickaxe-search/25385294#25385294
The way the -i is used with pickaxe (see commit accccde, git 1.7.10, April 2012) is:
git log -S foobar -i --oneline
# or
git log --regexp-ignore-case -Sfoobar
# or
git log -i -Sfoobar
Note that with 1.x git versions this option will not work with a regexps, only with a fixed string. It works with regexps only since git 2.0 and commit 218c45a, git 2.0, May 2014.
From:
https://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history/12430097#12430097
My favorite way to do it is with git log's -G option (added in version 1.7.4).
-G<regex>
Look for differences whose added or removed line matches the given <regex>.
There is a subtle difference between the way the -G and -S options determine if a commit matches:
The -S option essentially counts the number of times your search matches in a file before and after a commit. The commit is shown in the log if the before and after counts are different. This will not, for example, show commits where a line matching your search was moved.
With the -G option, the commit is shown in the log if your search matches any line that was added, removed, or changed.
You can combine -p / --patch with any of these methods to get a diff patch of the found commits.
Hopefully saves someone else (or future me) some time! ðŸ–¤
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
Â© 2025 GitHub,Â Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You canâ€™t perform that action at this time.