Kaliteli commit mesajları nasıl yazılır? · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
YunusEmreAlps/commit.md
Last active
September 18, 2025 12:06
Show Gist options
Download ZIP
Star
12
(12)
You must be signed in to star a gist
Fork
1
(1)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/YunusEmreAlps/f87ecdee88c05b76ab7518c2dca53f9b.js&quot;&gt;&lt;/script&gt;
Save YunusEmreAlps/f87ecdee88c05b76ab7518c2dca53f9b to your computer and use it in GitHub Desktop.
Code
Revisions
9
Stars
12
Forks
1
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/YunusEmreAlps/f87ecdee88c05b76ab7518c2dca53f9b.js&quot;&gt;&lt;/script&gt;
Save YunusEmreAlps/f87ecdee88c05b76ab7518c2dca53f9b to your computer and use it in GitHub Desktop.
Download ZIP
Kaliteli commit mesajları nasıl yazılır?
Raw
commit.md
Git Commit Mesajı Yazma Rehberi
İletişim, yazılım geliştirme dünyasında çok önemlidir ve commit mesajları sizin sesinizdir. Kodunuzun geçirdiği değişimin hikayesini etkileyici bir şekilde anlatabildiğinizi hayal edin - aslında anlatabilirsiniz ve bunun anahtarı da commit mesajlarınızdır.
En popüler sürüm kontrol sistemlerinden biri olan Git, geliştiricilerin değişiklikleri takip etmesine, projeler üzerinde işbirliği yapmasına ve hataları geri almasına olanak tanır. Git komutlarını anlamak çok önemli olsa da, etkili bir commit mesajının nasıl yazılacağını bilmek de aynı derecede değerlidir. İyi yapılandırılmış bir commit mesajı, ortak çalışanların ve hatta gelecekteki sizin, değişikliklerin arkasındaki geçmişi ve gerekçeyi anlayabilmenizi sağlar. Bu makalede, bir git commit mesajı yazmak için en iyi uygulamaları keşfedeceğiz ve bunu doğru yapmanın önemini inceleyeceğiz.
Neden Commit Mesajları Önemlidir?
Birçok geliştirici, yazılım geliştirmeye ilk başladığında commit mesajlarının önemini göz ardı eder. Genellikle ilk commit mesajları şöyle olur:
Initialised the project
Initial commit
Added files
Ancak ekip projelerinde commit mesajları çok daha önemli hale gelir. Yeni bir repoya girdiğinizde, projenin zaman içinde nasıl geliştiğini kolayca görebilmelisiniz.
Aşağıdaki gibi commit mesajları, değişiklikleri anlamak için koda bakmayı gerektirir:
Fix the bug
Updated styles
Added new feature
Oysa, aşağıdaki gibi açıklayıcı commit mesajları çok daha faydalıdır:
fix(blog): Imported posts formatted correctly with new styles
feat(blog): Update styles to reflect new design
feat(blog): Add blog feed to site
Kullanışlı bir versiyon geçmişi oluşturmak için ekipler, ortak bir commit mesajı standardı belirlemelidir. Bu, kişisel projeler için de geçerlidir.
Endüstride yaygın olarak kullanılan commit mesajı formatı "Conventional Commits" olarak bilinir. Bu format, mesajların tutarlı ve anlaşılır olmasını sağlar ve proje geçmişini takip etmeyi kolaylaştırır. Özellikle açık kaynak ve ekip çalışmalarında tercih edilir.
<type>(<scope>): <description>
[optional body]
[optional footer]
type: Commit türü
scope: Commit’in kapsamı (isteğe bağlı, genellikle önerilir)
description: Commit’in gerçek içeriği
body: Daha fazla açıklama için isteğe bağlı bir gövde. Büyük commitler için faydalıdır.
footer: İsteğe bağlı bir altbilgi
Type (Tür)
Commit mesajının türü, değişikliğin ne tür bir işlem olduğunu belirtir. Bu, projenin sürüm kontrol geçmişini anlamayı kolaylaştırır ve ekip üyelerinin hangi tür değişikliklerin yapıldığını hızlıca görmesini sağlar. Kendi commit türlerinizi tanımlayabilirsiniz, ancak yaygın olarak kullanılan bazı standart türler şunlardır:
build: Proje yapılandırma dosyalarında veya bağımlılıklarda değişiklikler.
ci: Sürekli entegrasyon (CI) yapılandırma dosyalarında değişiklikler.
docs: Belgelerin güncellenmesi (README, wiki vb.).
feat: Yeni bir özellik ekleme veya mevcut bir özelliği değiştirme.
fix: Koddaki bir hatayı veya bilinen bir sorunu düzeltme.
perf: Performans iyileştirmeleri.
refactor: Kodu yeniden düzenleme veya iyileştirme, ancak işlevselliği değiştirmeme.
chore: Derleme araçlarını veya yardımcı betikleri güncelleme.
style: Kodun biçimlendirilmesiyle ilgili değişiklikler (örneğin, boşluklar, noktalama işaretleri).
test: Mevcut özellikler için ek testler ekleme.
Scope (Kapsam)
Commit'in kapsamı, değişikliğin hangi bileşeni veya modülü etkilediğini belirtir. Bu, projenin karmaşıklığına bağlı olarak değişebilir ve genellikle bir bileşen adı veya modül adı olarak kullanılır. Kapsam, commit mesajının daha anlamlı ve okunabilir olmasını sağlar.
Örneğin, bir blog uygulaması üzerinde çalışıyorsanız, kapsam "blog", "auth", "ui" gibi bileşen adları olabilir. Kapsam, commit mesajının hangi bölüme ait olduğunu hızlıca anlamanızı sağlar.
Olası kapsam değerlerine örnekler aşağıda verilmiştir:
init
runner
watcher
config
web-server
proxy, etc.
Description (Açıklama)
Commit mesajının açıklaması, yapılan değişikliğin kısa ve öz bir özetidir. Bu, commit'in ne yaptığını ve neden yapıldığını anlamak için önemlidir. Açıklama, genellikle 50 karakterden uzun olmamalıdır ve ilk harfi büyük harfle başlamalıdır. Eğer değişiklerinizi tek bir satırda açıklayamıyorsanız, commit mesajınızı daha anlamlı hale getirmek için commit'i daha küçük parçalara ayırmayı düşünebilirsiniz. Bu, commit'inizin kalitesini artırır ve gelecekteki ekip üyelerinin veya sizin değişiklikleri anlamasını kolaylaştırır.
Body (Gövde) (İsteğe bağlı)
Commit mesajının gövdesi, yapılan değişikliklerin daha ayrıntılı bir açıklamasını sağlar. Bu bölüm, commit'in ne yaptığını ve neden yapıldığını daha derinlemesine anlamak için kullanılır. Gövde, genellikle 72 karakterden fazla olmamalıdır ve commit'in kapsamını ve amacını daha iyi açıklamak için kullanılır.
Gövde, commit'in neden yapıldığını, hangi sorunları çözdüğünü veya hangi özellikleri eklediğini açıklamak için kullanılabilir. Özellikle büyük değişiklikler veya karmaşık özellikler için faydalıdır.
Örnek:
feat(blog): Add blog feed to site
Add the markdown plugin, generate pages, and create blog template.
Footer (Altbilgi) (İsteğe Bağlı)
Commit mesajının altbilgisi, genellikle commit ile ilgili ek bilgileri veya referansları içerir. Bu bölüm, özellikle bir issue veya pull request ile ilişkilendirilmişse kullanışlıdır. Altbilgi, commit'in hangi sorunları çözdüğünü veya hangi özellikleri eklediğini belirtmek için kullanılabilir.
Altbilgi, genellikle "Closes" veya "Fixes" gibi anahtar kelimelerle başlar ve ilgili issue numarasını içerir. Bu, commit'in hangi sorunları çözdüğünü veya hangi özellikleri eklediğini belirtmek için kullanılır.
Örnek:
feat(blog): Add blog feed to site
Add the markdown plugin, generate pages, and create blog template.
Closes #123, #245, #992
BREAKING CHANGE:
`port-runner` command line option has changed to `runner-port`, so that it is
consistent with the configuration file syntax.
To migrate your project, change all the commands, where you use `--port-runner`
to `--runner-port`.
İyi Bir Commit Mesajı Yazmanın 7 Kuralı
Commit mesajı yazarken aşağıdaki kurallara dikkat edin:
Type ve scope her zaman küçük harflerle yazılmalıdır.
Commit mesajı 70 karakteri geçmemelidir.
Commit gövdesi 80 karakteri aşmamalıdır.
Değişiklikler küresel veya tek bir bileşene atanamıyorsa kapsam boş bırakılabilir; bu durumda parantezler atlanır.
Değişikliği belirtirken her zaman emir kipi ve şimdiki zaman kullanın.
Mesajda şifreler veya gizli anahtarlar gibi hassas bilgiler BULUNMAMALIDIR.
Çok büyük commit mesajlarından kaçının. Pratikte bir sınır yoktur, ancak 100 MB’lık bir mesaj performansı olumsuz etkiler.
Commit Mesajı Yazma Araçları
Commit mesajlarınızı yazarken kullanabileceğiniz bazı araçlar şunlardır:
Commitizen: Commit mesajlarınızı yazarken size rehberlik eden bir araçtır. Conventional Commits standardına uygun commit mesajları oluşturmanıza yardımcı olur.
Husky: Git hook'larını yönetmenizi sağlar. Commit mesajlarınızı belirli kurallara göre kontrol edebilir ve hatalı commit'leri engelleyebilirsiniz.
Commitlint: Commit mesajlarınızı Conventional Commits standardına uygun olup olmadığını kontrol eder. Hatalı commit mesajlarını engelleyerek projenizin sürüm kontrol geçmişini temiz tutar.
Projelerimde kullandığım commit mesajı kurallarını ve araçlarını aşağıda bulabilirsiniz:
// commitlint.config.js
// build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
// ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
// docs: Documentation only changes
// feat: A new feature
// fix: A bug fix
// perf: A code change that improves performance
// refactor: A code change that neither fixes a bug nor adds a feature
// style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
// test: Adding missing tests or correcting existing tests
// Read more at https://github.com/conventional-changelog/commitlint
module.exports = {
extends: ["@commitlint/config-conventional"],
rules: {
"body-leading-blank": [1, "always"],
"body-max-line-length": [2, "always", 100],
"footer-leading-blank": [1, "always"],
"footer-max-line-length": [2, "always", 100],
"header-max-length": [2, "always", 100],
"scope-case": [2, "always", "lower-case"],
"subject-case": [
2,
"never",
["sentence-case", "start-case", "pascal-case", "upper-case"],
],
"subject-empty": [2, "never"],
"subject-full-stop": [2, "never", "."],
"type-case": [2, "always", "lower-case"],
"type-empty": [2, "never"],
"type-enum": [
2,
"always",
[
"build",
"chore",
"ci",
"docs",
"feat",
"fix",
"perf",
"refactor",
"revert",
"style",
"test",
"translation",
"security",
"changeset",
],
],
},
};
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.