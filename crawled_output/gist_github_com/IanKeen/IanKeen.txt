IanKeen’s gists · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
🏂
Ian Keen
IanKeen
🏂
222
followers
·
2
following
Timberlane Labs
Whistler, B.C.
https://twitter.com/IanKay
X
@IanKay
View GitHub Profile
All gists
129
Forked
1
Starred
81
Sort
Recently created
Least recently created
Recently updated
Least recently updated
Sort
Recently created
Least recently created
Recently updated
Least recently updated
1 file
0 forks
0 comments
0 stars
IanKeen
/ View+Refreshable.swift
Created
June 12, 2025 23:44
SwiftUI: Better `refreshable` - Prevent View redraws cancelling `refreshable` by making it stable
extension View {
public func _refreshable(_ action: @escaping () async -> Void) -> some View {
modifier(RefreshableTaskModifier(action: action))
}
}
private struct RefreshId {
var value: UUID
var continuation: CheckedContinuation<Void, Never>
}
2 files
0 forks
0 comments
0 stars
IanKeen
/ PromptWindowController.swift
Created
April 1, 2025 17:04
— forked from joethephish/PromptWindowController.swift
Substage's flippy out command bar
import AppKit
import SwiftUI
class PromptWindowController: NSWindowController, NSWindowDelegate {
// Essential properties
private var promptWindowContext: PromptWindowContext
private let finderContext: FinderContext
init() {
2 files
0 forks
0 comments
1 star
IanKeen
/ DynamicProperties.swift
Created
February 19, 2025 19:16
Support stored properties in extensions
public protocol DynamicProperties: AnyObject {
subscript<T>(dynamic key: String) -> T? { get set }
}
private extension String {
var unsafePointer: UnsafeRawPointer {
return UnsafeRawPointer(bitPattern: hashValue)!
}
}
extension DynamicProperties {
3 files
0 forks
0 comments
5 stars
IanKeen
/ ObservableAppStorage.swift
Created
October 10, 2024 17:06
PropertyWrapper: ObservableAppStorage - Make UserDefaults work with @observable models (without all the boilerplate)
import Observation
public protocol _Observable: Observable {
nonisolated
func _access<Member>(keyPath: KeyPath<Self, Member>)
nonisolated
func _withMutation<Member, MutationResult>(
keyPath: KeyPath<Self, Member>,
_ mutation: () throws -> MutationResult
2 files
1 fork
0 comments
1 star
IanKeen
/ AllowDecodingFailure.swift
Created
October 3, 2024 18:36
PropertyWrapper: AllowDecodingFailure will catch decoding errors and return `nil` rather than failing the operation
@propertyWrapper
public struct AllowDecodingFailure<T: Codable>: Codable {
public var wrappedValue: T?
public var error: Error?
public var projectedValue: AllowDecodingFailure<T> { self }
public init(wrappedValue: T?) {
self.wrappedValue = wrappedValue
self.error = nil
}
1 file
0 forks
0 comments
2 stars
IanKeen
/ AllowDecodingFailures.swift
Created
June 14, 2024 17:25
PropertyWrapper: Allows for single elements in an array to "fail" decoding without failing the entire operation
@propertyWrapper
public struct AllowDecodingFailures<T: Codable>: Codable {
public var wrappedValue: [T]
public var errors: [Error]
public var projectedValue: AllowDecodingFailures<T> { self }
private struct Empty: Decodable { }
public init(wrappedValue: [T]) {
self.init(wrappedValue: wrappedValue, errors: [])
2 files
0 forks
0 comments
2 stars
IanKeen
/ AsyncPublished.swift
Created
May 21, 2024 17:58
PropertyWrapper: AsyncPublished
@propertyWrapper @MainActor public struct AsyncPublished<Value> {
public typealias AsyncAction = (Value) async throws -> Void
private class State {
var wrappedValue: Value
var isWorking: Bool = false
var current: Task<Void, Never>?
var action: AsyncAction = { _ in fatalError("Please configure action in parent object") }
init(wrappedValue: Value) {
2 files
0 forks
0 comments
6 stars
IanKeen
/ AnalyticsReducer.swift
Created
January 16, 2024 04:27
TCA: Example of creating an Analytics component to get before/after state
public protocol AnalyticsReducer {
associatedtype State
associatedtype Action
func analytics(before: State, after: State, action: Action) -> Effect<Action>
}
public struct _AnalyticsReducer<Base: Reducer, Analytics: AnalyticsReducer>: Reducer where Analytics.State == Base.State, Analytics.Action == Base.Action {
@usableFromInline
let base: Base
2 files
1 fork
0 comments
0 stars
IanKeen
/ ReadSpacing.swift
Created
October 24, 2022 20:10
SwiftUI: Read the default spacing for use elsewhere
struct ReadSpacing<Content: View>: View {
@State private var spacing: CGFloat = 0
@Binding private var outsideSpacing: CGFloat?
private let content: (CGFloat) -> Content
init(@ViewBuilder content: @escaping (CGFloat) -> Content) {
self._outsideSpacing = .constant(nil)
self.content = content
}
init(into spacing: Binding<CGFloat>, @ViewBuilder content: @escaping () -> Content) {
2 files
2 forks
0 comments
17 stars
IanKeen
/ Abstraction.swift
Created
August 16, 2022 17:41
TCA Scoping Abstraction
// MARK: - TCAView
public protocol TCAView: View where Body == WithViewStore<ScopedState, ScopedAction, Content> {
associatedtype ViewState
associatedtype ViewAction
associatedtype ScopedState
associatedtype ScopedAction
associatedtype Content
NewerOlder
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.