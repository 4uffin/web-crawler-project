banjun’s gists · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
banjun
banjun
Full time iOS & visionOS app developer, working on Apple platforms since macOS 10.1
118
followers
·
21
following
@st-tech
Tokyo, Japan
https://github.banjun.jp
X
@banjun
View GitHub Profile
All gists
43
Forked
1
Starred
5
Sort
Recently created
Least recently created
Recently updated
Least recently updated
Sort
Recently created
Least recently created
Recently updated
Least recently updated
1 file
0 forks
0 comments
0 stars
banjun
/ RemoteVisionOSARKitLayer.swift
Created
July 16, 2025 08:12
Remote visionOS CompositorLayer with required ARKit session enabled for RemoteImmersiveSpace
// copied from Apple Sample Codes: CS_HoverEffect
https://developer.apple.com/documentation/compositorservices/rendering_hover_effects_in_metal_immersive_apps
// and modified by banjun
#if os(macOS)
import CompositorServices
import SwiftUI
/// Usage:
/// ```swift
/// RemoteVisionOSARKitLayer { renderer, worldTracker in
1 file
0 forks
1 comment
0 stars
banjun
/ RenderTextureScene.swift
Created
February 9, 2025 16:19
RealityKit wrapper for RenderTexture like scene, with supports for multiple cameras
import Foundation
import RealityFoundation
///
/// ```swift
/// renderTextureScene.entities.append(rootEntity.clone(recursive: true))
/// let renderTextureMaterial = UnlitMaterial(texture: renderTextureScene.textureResources[0])
/// ModelEntity(mesh: .generatePlane(width: 1, height: 1), materials: [renderTextureMaterial])
/// ...
///
1 file
0 forks
2 comments
0 stars
banjun
/ SwiftUIObservationLeaks.swift
Created
February 4, 2025 04:27
SwiftUI & Observation memory leaks
import SwiftUI
import Observation
// Leaks Malloc 48 Bytes block, 144 Bytes block, 128 Bytes block on macOS 15.3 (24D60), Xcode 16.2 (16C5032a)
// leaks speed is ~ +10MB / 5 mins, with Instruments
@main
struct SwiftUIObservationLeaksApp: App {
@State private var model: Model = .init()
@MainActor @Observable final class Model {
1 file
0 forks
0 comments
0 stars
banjun
/ UsdSkelExample.swift
Created
January 17, 2025 12:33
create example model with skeleton for IK: https://openusd.org/dev/api/_usd_skel__schema_overview.html
extension ModelEntity {
/// create example model with skeleton: https://openusd.org/dev/api/_usd_skel__schema_overview.html
static func createUsdSkelExample() async throws -> ModelEntity {
var d = MeshDescriptor()
d.positions = .init([
.init(0.5, -0.5, 4), .init(-0.5, -0.5, 4), .init(0.5, 0.5, 4), .init(-0.5, 0.5, 4),
.init(-0.5, -0.5, 0), .init(0.5, -0.5, 0), .init(-0.5, 0.5, 0), .init(0.5, 0.5, 0),
.init(-0.5, 0.5, 2), .init(0.5, 0.5, 2), .init(0.5, -0.5, 2), .init(-0.5, -0.5, 2)])
d.primitives = .trianglesAndQuads(triangles: [], quads: [
2, 3, 1, 0,
1 file
0 forks
0 comments
0 stars
banjun
/ KibouApp.swift
Created
December 25, 2024 11:59
https://x.com/banjun/status/1871886052069404768
import SwiftUI
import RealityKit
@main
struct KibouApp: App {
@Environment(\.scenePhase) private var scenePhase
@State private var transform: Transform = .identity
@GestureState private var dragState: SIMD3<Float>?
var body: some SwiftUI.Scene {
1 file
0 forks
0 comments
0 stars
banjun
/ TimerOnMainActor.swift
Last active
September 13, 2024 09:09
Timer.scheduledTimer on MainActor
import Foundation
extension Timer {
@MainActor @discardableResult static func scheduledTimerOnMainRunLoop(withTimeInterval: TimeInterval, repeats: Bool, block: @escaping @MainActor (Timer) -> Void) -> Timer {
// The doc says: Creates and returns a new NSTimer object initialized with the specified block object and schedules it on the current run loop
// But the block is not annotated with @MainActor and we need MainActor.assumeIsolated
// Since Timer is non-Sendable, capture by nonisolated(unsafe) to pass from nonisolated context to MainActor.
Timer.scheduledTimer(withTimeInterval: withTimeInterval, repeats: repeats) { timer in
nonisolated(unsafe) let timer: Timer = timer
MainActor.assumeIsolated {
1 file
0 forks
0 comments
1 star
banjun
/ generatePlaneMesh.swift
Last active
August 2, 2024 09:55
Create Plane USDA
import simd
func generatePlaneMesh(lengthInMeter: Float = 1, divisions: Int = 100, name: String = "GeneratedPlane") {
let n = divisions
let xys: [(Int, Int)] = (0..<n).flatMap { y in (0..<n).map { x in (x, y) }}
let points: [SIMD3<Float>] = xys.map { x, y in
SIMD3(Float(x) / Float(n - 1) - 0.5, Float(y) / Float(n - 1) - 0.5, 0) * lengthInMeter
}
let faceVertexIndices: [Int] = xys.flatMap { x, y in
guard x < n - 1, y < n - 1 else { return [Int]() }
1 file
0 forks
1 comment
0 stars
banjun
/ MultiColumnText.swift
Last active
May 2, 2024 07:53
SwiftUI multi column text backed by TextKit 1 multi column layout
struct MultiColumnText: View {
private let storage: NSTextStorage
private let layoutManager: NSLayoutManager = .init()
private let containers: [NSTextContainer]
init(text: NSAttributedString, columns: Int) {
storage = .init(attributedString: text)
storage.addLayoutManager(layoutManager)
containers = (0..<columns).map {_ in .init()}
containers.forEach {
1 file
0 forks
0 comments
0 stars
banjun
/ Inwardbox.swift
Created
April 16, 2024 05:19
for visionOS gestures, generate a box with its surfaces facing inward
import RealityKit
extension ShapeResource {
/// generate a box with its surfaces facing inward.
/// NOTE: size 30 works with interactions, 50 does not work with interactions
static func generateInwardBox(size: Float) async throws -> ShapeResource {
// An array of vertex positions containing discrete points on the mesh.
let meshPositions: [SIMD3<Float>] = [
.init(-1, -1, -1), // 0 LBF
.init(+1, -1, -1), // 1 RBF
1 file
0 forks
0 comments
4 stars
banjun
/ UserActivityWindowGroup.swift
Last active
September 17, 2025 20:07
Open new window on drop UserActivity
import SwiftUI
// prerequisites in Info.plist: NSUserActivityTypes contains type, UIApplicationSceneManifest/UIApplicationSupportsMultipleScenes = YES
// accepts NSUserActivity.targetContentIdentifier = type
// see also: https://developer.apple.com/documentation/swiftui/scene/handlesexternalevents(matching:)
struct UserActivityWindowGroup<Content: View, Payload: Codable>: Scene {
var type: String
@ViewBuilder var content: (Payload) -> Content
init(type: String, payloadType: Payload.Type, @ViewBuilder content: @escaping (Payload) -> Content) {
NewerOlder
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.