відправка даних форми методом POST fetch API + валідація елементів форми · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
sunmeat/index.html
Last active
September 17, 2025 21:46
Show Gist options
Download ZIP
Star
2
(2)
You must be signed in to star a gist
Fork
0
(0)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/sunmeat/7372b2445882de72a0af85308584327d.js&quot;&gt;&lt;/script&gt;
Save sunmeat/7372b2445882de72a0af85308584327d to your computer and use it in GitHub Desktop.
Code
Revisions
3
Stars
2
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/sunmeat/7372b2445882de72a0af85308584327d.js&quot;&gt;&lt;/script&gt;
Save sunmeat/7372b2445882de72a0af85308584327d to your computer and use it in GitHub Desktop.
Download ZIP
відправка даних форми методом POST fetch API + валідація елементів форми
Raw
index.html
<!DOCTYPE html>
<html lang="uk">
<head>
<meta charset="UTF-8">
<title>Надсилання даних форми fetch API + валідація</title>
<style>
body {
font-family: Arial, sans-serif;
background-color: #121212;
color: #ffffff;
text-align: center;
padding: 2rem;
}
.container {
max-width: 600px;
margin: 0 auto;
background-color: #1e1e1e;
padding: 20px;
border-radius: 10px;
}
form {
display: flex;
flex-direction: column;
gap: 15px;
}
label {
font-weight: bold;
text-align: left;
}
input, select, textarea {
padding: 8px;
border-radius: 5px;
border: none;
background-color: #2a2a2a;
color: #ffffff;
width: 100%;
box-sizing: border-box;
}
input[type="file"] {
padding: 8px 0;
}
textarea {
resize: vertical;
min-height: 80px;
}
button {
padding: 0.5rem 1rem;
margin-top: 10px;
border-radius: 5px;
border: none;
background-color: #1db954;
color: #ffffff;
cursor: pointer;
}
button:hover {
background-color: #1ed760;
}
pre {
background-color: #2a2a2a;
padding: 10px;
border-radius: 5px;
white-space: pre-wrap;
word-wrap: break-word;
text-align: left;
}
.error {
color: #ff5555;
font-size: 0.9em;
margin-top: 5px;
text-align: left;
}
.field-error {
border: 1px solid #ff5555;
}
</style>
</head>
<body>
<div class="container">
<h2>Додати тварину до магазину</h2>
<form id="petForm" novalidate>
<div>
<label for="name">Ім’я тварини:</label>
<input type="text" id="name" name="name" required placeholder="Наприклад, Мурчик">
<div id="nameError" class="error"></div>
</div>
<div>
<label for="status">Статус:</label>
<select id="status" name="status" required>
<option value="" disabled selected>Виберіть статус</option>
<option value="available">Доступний</option>
<option value="pending">В очікуванні</option>
<option value="sold">Проданий</option>
</select>
<div id="statusError" class="error"></div>
</div>
<div>
<label for="category">Категорія:</label>
<input type="text" id="category" name="category" placeholder="Наприклад, Кіт">
<div id="categoryError" class="error"></div>
</div>
<div>
<label for="photos">Фотографії тварини:</label>
<input type="file" id="photos" name="photos" multiple accept="image/*">
<div id="photosError" class="error"></div>
</div>
<div>
<label for="tags">Теги (через кому):</label>
<textarea id="tags" name="tags" placeholder="Наприклад, дружелюбний, грайливий"></textarea>
<div id="tagsError" class="error"></div>
</div>
<button type="submit">Додати тварину</button>
</form>
<div id="formResult"></div>
</div>
<script>
const form = document.querySelector('#petForm');
const resultDiv = document.querySelector('#formResult');
// валідація полів
const validators = {
name: (value) => {
if (!value.trim()) return 'Ім’я тварини обов’язкове';
if (value.length < 2) return 'Ім’я має містити мінімум 2 символи';
if (value.length > 50) return 'Ім’я не має перевищувати 50 символів';
if (!/^[a-zA-Zа-яА-Я\s-]+$/.test(value)) return 'Ім’я може містити тільки букви, пробіли та дефіс';
return '';
},
status: (value) => {
if (!value) return 'Виберіть статус';
if (!['available', 'pending', 'sold'].includes(value)) return 'Недопустимий статус';
return '';
},
category: (value) => {
if (value && value.length > 50) return 'Категорія не має перевищувати 50 символів';
if (value && !/^[a-zA-Zа-яА-Я\s-]+$/.test(value)) return 'Категорія може містити тільки букви, пробіли та дефіс';
return '';
},
photos: (files) => {
const maxFiles = 5;
const maxSize = 5 * 1024 * 1024; // 5MB
if (files.length > maxFiles) return `Максимум ${maxFiles} файлів`;
for (let file of files) {
if (!file.type.startsWith('image/')) return 'Дозволені тільки зображення';
if (file.size > maxSize) return 'Максимальний розмір файлу 5MB';
}
return '';
},
tags: (value) => {
const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag);
if (tags.some(tag => tag.length > 30)) return 'Кожен тег не має перевищувати 30 символів';
if (tags.length > 10) return 'Максимум 10 тегів';
if (tags.some(tag => !/^[a-zA-Zа-яА-Я0-9\s-]+$/.test(tag))) return 'Теги можуть містити тільки букви, цифри, пробіли та дефіс';
return '';
}
};
function clearErrors() {
document.querySelectorAll('.error').forEach(el => el.textContent = '');
document.querySelectorAll('.field-error').forEach(el => el.classList.remove('field-error'));
}
function showError(fieldId, message) {
const errorDiv = document.querySelector(`#${fieldId}Error`);
const field = document.querySelector(`#${fieldId}`);
errorDiv.textContent = message;
field.classList.add('field-error');
}
// валідація форми
function validateForm() {
clearErrors();
let isValid = true;
for (const [field, validator] of Object.entries(validators)) {
const value = field === 'photos'
? form.querySelector(`#${field}`).files
: form.querySelector(`#${field}`).value;
const error = validator(value);
if (error) {
showError(field, error);
isValid = false;
}
}
return isValid;
}
form.addEventListener('submit', async (e) => {
e.preventDefault();
if (!validateForm()) return;
resultDiv.innerHTML = '<p>Надсилання...</p>';
try {
// збираємо дані
const name = form.querySelector('#name').value;
const status = form.querySelector('#status').value;
const category = form.querySelector('#category').value;
const photos = form.querySelector('#photos').files;
const tags = form.querySelector('#tags').value
.split(',')
.map(tag => tag.trim())
.filter(tag => tag)
.map(tag => ({ name: tag }));
// перетворення файлів у base64 (для прикладу, у реальному додатку краще використовувати FormData для завантаження файлів)
const photoUrls = await Promise.all(
Array.from(photos).map(file =>
new Promise((resolve) => {
const reader = new FileReader();
reader.onload = () => resolve(reader.result);
reader.readAsDataURL(file);
})
)
);
const data = {
name,
status,
category: category ? { name: category } : {},
photoUrls: photoUrls.length > 0 ? photoUrls : [],
tags: tags.length > 0 ? tags : []
};
const response = await fetch('https://petstore.swagger.io/v2/pet', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'Accept': 'application/json'
},
body: JSON.stringify(data)
});
if (!response.ok) {
throw new Error(`HTTP помилка! статус: ${response.status}`);
}
const result = await response.json();
resultDiv.innerHTML = `
<p>Тварину успішно додано:</p>
<pre>${JSON.stringify(result, null, 2)}</pre>
`;
} catch (error) {
resultDiv.innerHTML = `<p class="error">Помилка: ${error.message}</p>`;
}
});
</script>
</body>
</html>
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.