GNU Parallel Mastery: The Ultimate Cheat Sheet · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
copyleftdev/parallel.md
Created
August 24, 2024 06:51
Show Gist options
Download ZIP
Star
1
(1)
You must be signed in to star a gist
Fork
0
(0)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/copyleftdev/3704d8d0baee6ba85cb2b759cd386e12.js&quot;&gt;&lt;/script&gt;
Save copyleftdev/3704d8d0baee6ba85cb2b759cd386e12 to your computer and use it in GitHub Desktop.
Code
Revisions
2
Stars
1
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/copyleftdev/3704d8d0baee6ba85cb2b759cd386e12.js&quot;&gt;&lt;/script&gt;
Save copyleftdev/3704d8d0baee6ba85cb2b759cd386e12 to your computer and use it in GitHub Desktop.
Download ZIP
GNU Parallel Mastery: The Ultimate Cheat Sheet
Raw
parallel.md
🚀 GNU Parallel Mastery: The Ultimate Cheat Sheet
📊 Basic Usage
Command
Description
Example
parallel echo ::: A B C
🔤 Process items in parallel
Output: A, B, C (in any order)
parallel echo {} ::: *.txt
🔍 Use {} as placeholder
Echoes names of all .txt files
cat file.txt | parallel echo
📥 Read input from stdin
Processes each line of file.txt
parallel -j4 command ::: item1 item2 item3
🔢 Limit to 4 jobs at a time
Runs 'command' on items, max 4 parallel
🔧 Input Sources
Syntax
Description
Example
:::
📊 Command line input
parallel echo ::: A B C
::::
📂 File input (one item per line)
parallel echo :::: items.txt
:::+
🔗 Combine arguments from multiple sources
parallel echo ::: A B C :::+ X Y Z
-a file
📄 Read input from file
parallel -a items.txt echo
🔀 Job Control
Option
Description
Example
-j N
🔢 Run N jobs in parallel
parallel -j4 command ::: 1 2 3 4 5 6
-k
🔤 Keep output in order
parallel -k echo ::: C B A
--halt soon,fail=1
🛑 Stop all jobs on first failure
parallel --halt soon,fail=1 command ::: 1 2 3
--eta
⏱️ Show estimated time of completion
parallel --eta command ::: {1..100}
--bar
📊 Display progress bar
parallel --bar command ::: {1..100}
🔁 Replacement Strings
String
Description
Example
{}
🔄 Input line
parallel echo {} ::: A B C
{.}
🔪 Input line without extension
parallel echo {.} ::: file.txt
{/}
📂 Basename of input line
parallel echo {/} ::: /path/to/file.txt
{//}
📁 Dirname of input line
parallel echo {//} ::: /path/to/file.txt
{#}
🔢 Sequence number of job
parallel echo {#} {} ::: A B C
{%}
🔢 Job slot number
parallel -j2 echo {%} {} ::: A B C D
📡 Remote Execution
Command
Description
Example
--sshlogin user@host1,user@host2
🖥️ Run on remote hosts
parallel --sshlogin user@host1,user@host2 command ::: 1 2 3
--transfer
📤 Transfer files to remote
parallel --transfer --sshlogin user@host command ::: file1 file2
--return {.}.out
📥 Return output files from remote
parallel --return {.}.out --sshlogin user@host command ::: file1 file2
🔧 Advanced Techniques
Technique
Description
Example
--pipe
🚿 Split input stream
cat bigfile.txt | parallel --pipe grep 'pattern'
--xargs
🔨 Emulate xargs
find . -name '*.jpg' | parallel --xargs convert {} {.}.png
--shebang
📜 Use in scripts
#!/usr/bin/parallel --shebang
--dry-run
🏃‍♂️ Show commands without executing
parallel --dry-run echo ::: A B C
--results outdir
📁 Store output in directory
parallel --results outdir command ::: 1 2 3
🏆 Pro Tips
📚 Use man parallel_tutorial for an extensive guide
🔍 Use parallel --citation in your publications if you use GNU Parallel
🔢 Use {1}, {2}, etc. for multiple input sources
📊 Use --joblog logfile to keep a log of executed jobs
🔄 Use --resume to resume interrupted runs
🔒 Use --compress when transferring large amounts of data to remote hosts
🔧 Use --tag to prefix each line of output with the input line
📈 Use --progress for a live progress update
🔍 Use --regexp to use regular expressions in replacement strings
🔀 Use parallel --link to process input sources in lockstep
📜 Example: Image Processing
#!/usr/bin/env bash
# Resize all .jpg images to 50% of their original size
find . -name "*.jpg" | parallel convert {} -resize 50% {.}_resized.jpg
# Convert all .png images to .jpg in parallel, utilizing all CPU cores
parallel convert {} {.}.jpg ::: *.png
# Process images on remote servers
parallel --sshlogin user@server1,user@server2 --transfer \
"convert {} -resize 50% {.}_resized.jpg && rm {}" ::: *.jpg
# Generate thumbnails for all images, showing progress
parallel --bar "convert {} -resize 100x100^ -gravity center -extent 100x100 {}_thumb.jpg" ::: *.jpg
# Process large log file in parallel
cat large_log.txt | parallel --pipe grep 'ERROR' > errors.txt
# Parallel download of files
cat urls.txt | parallel --eta wget {}
Remember, GNU Parallel is a powerful tool. Use it responsibly and always test your commands with --dry-run before executing them on important data! 🚀💻
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Community
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.