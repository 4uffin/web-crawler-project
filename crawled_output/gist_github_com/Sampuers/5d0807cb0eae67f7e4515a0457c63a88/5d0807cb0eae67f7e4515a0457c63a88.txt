3. Recordatorio_telegram · GitHub
Skip to content
Search Gists
Search Gists
All gists
Back to GitHub
Sign in
Sign up
Sign in
Sign up
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Instantly share code, notes, and snippets.
Sampuers/3. Recordatorio_telegram
Last active
September 17, 2025 17:04
Show Gist options
Download ZIP
Star
1
(1)
You must be signed in to star a gist
Fork
1
(1)
You must be signed in to fork a gist
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/Sampuers/5d0807cb0eae67f7e4515a0457c63a88.js&quot;&gt;&lt;/script&gt;
Save Sampuers/5d0807cb0eae67f7e4515a0457c63a88 to your computer and use it in GitHub Desktop.
Code
Revisions
2
Stars
1
Forks
1
Embed
Embed
Embed this gist in your website.
Share
Copy sharable link for this gist.
Clone via HTTPS
Clone using the web URL.
Learn more about clone URLs
Clone this repository at &lt;script src=&quot;https://gist.github.com/Sampuers/5d0807cb0eae67f7e4515a0457c63a88.js&quot;&gt;&lt;/script&gt;
Save Sampuers/5d0807cb0eae67f7e4515a0457c63a88 to your computer and use it in GitHub Desktop.
Download ZIP
Raw
3. Recordatorio_telegram
from telegram import Bot
import schedule
import time
import asyncio
print(" Bot de Telegram - RECORDATORIO ")
print("=" * 40)
#
IMPORTANTE -----> SUSTITUIR por los datos correctos
TOKEN = "tu token del botFather"
# Tu token del BotFather
CHAT_ID = "tu ID chat de Telegram"
# Tu chat ID de Telegram
# Creación del bot
bot = Bot(token=TOKEN)
# Creación de un bucle de eventos y puesta en marcha
bucle = asyncio.new_event_loop()
asyncio.set_event_loop(bucle)
async def enviar_recordatorio():
# función que puede hacer pausas
"""Enviar recordatorio de comprar pan"""
try:
mensaje = " Recordatorio: ¡Compra pan!"
await bot.send_message(chat_id=CHAT_ID, text=mensaje)
# Esperar sin congelar el programa
print(" Recordatorio enviado!")
except Exception as e:
print(f" Error enviando mensaje: {e}")
def enviar_recordatorio_sincrono():
# Función que coordina
"""Función adaptadora para ejecutar la función asíncrona"""
try:
# Utilizar el bucle global
if bucle.is_running():
# Si el bucle ya se está ejecutando, crear una tarea
asyncio.create_task(enviar_recordatorio())
else:
# Si no se está ejecutando, ejecutarlo
bucle.run_until_complete(enviar_recordatorio())
except Exception as e:
print(f" Error en la función sincronizada: {e}")
# Podemos jugar a poner diferentes Programaciones...
schedule.every(10).seconds.do(enviar_recordatorio_sincrono)
print(" Recordatorio programado cada 10 segundos para probar")
print(" Bot iniciado! Presiona Ctrl+C para detener.")
# Bucle principal que siempre se ejecuta
try:
while True:
schedule.run_pending()
time.sleep(1)
# 1 segundo entre comprobaciones
except KeyboardInterrupt:
print("\n Bot detenido por el usuario")
# Cerrar el bucle
if not bucle.is_closed():
bucle.close()
#-----------EJEMPLOS DE DÍAS Y HORAS PARA RECORDATORIOS------------->
#DÍA Y HORA CONCRETA
#schedule.every().monday.at("08:00").do(enviar_recordatorio_sincrono)
#schedule.every().tuesday.at("09:30").do(enviar_recordatorio_sincrono)
#FECHA ESPECÍFICA
#fecha_concreta = datetime(2024, 3, 15, 10, 0)
# 15 de marzo de 2024 a las 10:00
#schedule.every().day.at(fecha_concreta.strftime("%H:%M")).do(enviar_recordatorio_sincrono)
#HORA DIARIA FIJA
#schedule.every().day.at("08:00").do(enviar_recordatorio_sincrono)
# Cada día a las 8 de la mañana
#schedule.every().day.at("20:00").do(enviar_recordatorio_sincrono)
# Cada día a las 8 de la noche
Copy link
Author
Sampuers
commented
Sep 11, 2025
Este script en Python te permite programar recordatorios automáticos que se envían a través de Telegram. Perfecto para recordatorios diarios, semanales o en horarios específicos.
Características principales:
Envía mensajes automáticos por Telegram
Programación flexible (segundos, minutos, horas, días específicos)
Fácil configuración con token y chat ID
Requisitos previos
Instalar dependencias:
pip install python-telegram-bot schedule
Necesitas obtener:
Token de BotFather: Crea un bot con @Botfather en Telegram
Chat ID: Obtén tu ID de chat con @userinfobot
En este enlace está explicado como crear el bot en BotFather...
https://docs.radist.online/docs/espanol-1/productos-1/radist-web/conexiones/telegram-bot/instrucciones-para-crear-y-configurar-un-bot-en-botfather
Reemplaza estos valores en el código:IMPORTANTE
TOKEN = "TU_TOKEN_AQUÍ"
# Token de @Botfather
CHAT_ID = "TU_CHAT_ID_AQUÍ"
# Tu ID de chat de Telegram
Personalización
Cambiar el mensaje.
Añadir nuevos recordatorios.
Solución de problemas
Error común: "Chat not found"
Verifica que el CHAT_ID sea correcto
Asegúrate de que el bot tiene permisos para enviar mensajes
Error: "Invalid token"
Revisa el token de BotFather
Asegúrate de no tener espacios en el token
El bot no envía mensajes:
Verifica tu conexión a internet
Comprueba que el bot está ejecutándose
Módulos utilizados
python-telegram-bot - Comunicación con Telegram API
schedule - Programación de tareas
asyncio - Manejo de operaciones asíncronas
time - Control de intervalos
Ideas para PERSONALIZAR
Añadir múltiples mensajes personalizados
Programar diferentes recordatorios por días
Interfaz web para configurar recordatorios
Base de datos para guardar programaciones
Comandos de Telegram para gestionar recordatorios
IMPORTANTE
seguridad
NUNCA compartas tu TOKEN o CHAT_ID
Mantén privado el acceso al bot
Sorry, something went wrong.
Uh oh!
There was an error while loading. Please reload this page.
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
Footer
© 2025 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact
Manage cookies
Do not share my personal information
You can’t perform that action at this time.