Browser extensions - Mozilla | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Color picker
Box-shadow generator
Border-image generator
Border-radius generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
Mozilla
Add-ons
Browser extensions
Browser extensions
Extensions, or add-ons, can modify and enhance the capability of a browser. Extensions for Firefox are built using the WebExtensions API cross-browser technology.
The technology for extensions in Firefox is, to a large extent, compatible with the extension API supported by Chromium-based browsers (such as Google Chrome, Microsoft Edge, Opera, Vivaldi). In most cases, extensions written for Chromium-based browsers run in Firefox with just a few changes.
In this article
Key resourcesGet startedConceptsUser interfaceHow toFirefox workflowReference
Key resources
Guides
Whether you're just beginning or looking for more advanced advice, learn about how extensions work and use the WebExtensions API from our extensive range of tutorials and guides.
References
Get comprehensive details about the methods, properties, types, and events of the WebExtensions APIs and full details about the manifest keys.
Firefox workflow
Discover how to build and publish extensions for Firefox: get the lowdown on developer tools, publication and distribution, and porting on Extension Workshop.
Note:
If you have ideas or questions or need help, you can reach us on the community forum or in the Add-ons Room on Matrix.
Get started
Discover what extensions can do before building your first extension and your second extension. Learn about the anatomy of an extension and get an overview of the extension development and publication workflow, Firefox style. Explore a little deeper with a comprehensive selection of example extensions that you can run right in Firefox. Continue your learning by discovering a list of resources to follow.
Concepts
Get detailed information on the concepts that underpin extensions.
Overview of the JavaScript API
Content scripts
Background scripts
Match patterns
Working with files
Internationalization
Content security policy
Native messaging
Native manifests
User actions
Differences between API implementations
Chrome incompatibilities
User interface
Discover all the user interface components you can use in your extensions, with coding examples and tips.
How to
A range of tutorials to get you started on specific aspects of extension development.
Intercept HTTP requests
Modify a web page
Safely insert external content into a page
Share objects with page scripts
Add a button to the toolbar
Implement a settings page
Work with the Tabs API
Work with the Bookmarks API
Work with the Cookies API
Work with contextual identities
Interact with the clipboard
Extend the developer tools
Build a cross-browser extension
Firefox workflow
When you are ready to create your extension for Firefox or port your Chrome extension, head over to Extension Workshop. It has details on:
The Firefox workflow, such as temporarily installing extensions during development, debugging, request the right permissions, and more.
The web-ext developer tool.
Porting a Google Chrome extension, differences between desktop and Android, and more.
Publishing and distribution overview, promoting your extension, the extension lifecycle best practices, and more.
Reference
JavaScript APIs
Get comprehensive details about the methods, properties, types, and events for all the JavaScript APIs. There is also detailed information about the compatibility of each API with the major browsers. Most reference pages also include coding examples and links to the extension examples that use the API.
Manifest keys
Get full details about the manifest keys, including all their properties and settings.
Help improve MDN
Learn how to contribute
This page was last modified on â¨Jul 17, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
Browser extensionsGetting startedWhat are extensions?Your first extensionYour second extensionAnatomy of an extensionExample extensionsWhat next?ConceptsJavaScript APIsContent scriptsBackground scriptsMatch patternsWork with filesInternationalizationContent Security PolicyNative messagingNative manifestsUser actionsDifferences between API implementationsChrome incompatibilitiesUser interfaceToolbar buttonAddress bar buttonSidebarsContext menu itemsOptions pageExtension pagesNotificationsAddress bar suggestionsdevtools panelsBrowser stylesPopupsHow toIntercept HTTP requestsModify a web pageInsert external contentShare objects with page scriptsAdd a button to the toolbarImplement a settings pageWork with the Tabs APIWork with the Bookmarks APIWork with the Cookies APIWork with contextual identitiesInteract with the clipboardExtend the developer toolsBuild a cross-browser extensionJavaScript APIsBrowser support for JavaScript APIsactionalarmsbookmarksbrowserActionbrowserSettingsbrowsingDatacaptivePortalclipboardcommandscontentScriptscontextualIdentitiescookiesdeclarativeNetRequestdevtoolsdnsdomdownloadseventsextensionextensionTypesfindhistoryi18nidentityidlemanagementmenusnotificationsomniboxpageActionpermissionspkcs11privacyproxyruntimescriptingsearchsessionssidebarActionstoragetabGroupstabsthemetopSitestypesuserScriptsuserScripts (Legacy)webNavigationwebRequestwindowsManifest keysactionauthorbackgroundbrowser_actionbrowser_specific_settingschrome_settings_overrideschrome_url_overridescommandscontent_scriptscontent_security_policydeclarative_net_requestdefault_localedescriptiondeveloperdevtools_pagedictionariesexternally_connectablehomepage_urlhost_permissionsiconsincognitomanifest_versionnameoffline_enabled
Deprecated
omniboxoptional_host_permissionsoptional_permissionsoptions_pageoptions_uipage_actionpermissionsprotocol_handlersshort_namesidebar_actionstoragethemetheme_experimentuser_scriptsversionversion_nameweb_accessible_resourcesExtension WorkshopDevelopPublishManageEnterpriseContact usChannelsAdd-ons blogAdd-ons forumAdd-ons chat
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.