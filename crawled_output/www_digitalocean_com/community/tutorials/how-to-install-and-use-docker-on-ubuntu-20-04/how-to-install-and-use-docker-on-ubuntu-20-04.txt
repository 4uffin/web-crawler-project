How To Install and Use Docker on Ubuntu | DigitalOceanBlogDocsGet SupportContact SalesDigitalOceanProductsFeatured ProductsDropletsScalable virtual machinesKubernetesScale more effectivelyGradientâ¢ AI Agentic CloudBuild and scale with AICloudwaysManaged cloud hostingApp PlatformGet apps to market fasterManaged DatabasesFully-managed database hostingComputeDropletsKubernetesCPU-Optimized DropletsFunctionsApp PlatformGradientâ¢ AI Agentic CloudGPU Droplets1-Click ModelsPlatformBare Metal GPUsBackups & SnapshotsBackupsSnapshotsSnapShooterNetworkingVirtual Private Cloud (VPC)Partner Network ConnectCloud FirewallsLoad BalancersDNSDDoS ProtectionManaged DatabasesMongoDBKafkaMySQLPostgreSQLValkeyOpenSearchStorageSpaces Object StorageVolume Block StorageDeveloper ToolsAPICLISupport PlansMonitoringUptimeIdentity and Access ManagementMarketplaceDroplet 1-ClickKubernetes 1-ClickAI 1-Click ModelsAdd-OnsCloud Website HostingCloudwaysSee all productsSolutionsAI and Machine LearningDevelop, train, and deploy AI appsGPUsPlatform1-Click ModelsHR Knowledge AssistantCode CopilotSupport Ticket TriageRecommendation EngineBlockchainInfrastructure for decentralized appsBlogs, Forums and Content WebsitesLightning-fast, reliable CMS hostingWordpressGhostMastodonData AnalyticsReal-time data processing at scaleData StreamingAdTech & MartechKafkaDeveloper ToolsDevOps and CI/CD solutionsCI/CDPrototypingDigital Marketing AgenciesPower your clientsâ websites and campaignsFreelancerIT ConsultingEcommerceBuild beautiful online storefrontsDropshippingWooCommerceMagentoGame DevelopmentLow-latency multiplayer serversMinecraft HostingIoTConnect to the power of the cloudKafkaISVsStreamlined ISV application developmentSecure Web HostingPowerful protection from DDoS and morePrivate VPNStartup Cloud HostingScalable, cost-effective infrastructureSmall BusinessVideo StreamingHigh-bandwidth, low-latency deliveryKafkaWeb and Mobile AppsSimple cross-platform app hostingcPanelDockerNext.jsNode.jsWebsite HostingFast page loads and reliable site uptimeVPS HostingVirtual MachinesGet helpMigration AssistanceTalk to an expertSee all solutionsDevelopersOur CommunityCommunity HomeDevOps and development guidesCSS-TricksAll things web designThe WaveContent to level up your business.ResourcesTutorialsQuestions and AnswersMarketplaceToolsWrite for DOnationsCloud ChatsCustomer StoriesDigitalOcean BlogPricing CalculatorGet InvolvedHatch Startup ProgramOpen Source SponsorshipsHacktoberfestDeploy 2025Wavemakers ProgramDocumentationQuickstartComputeGradientâ¢ AI PlatformStorageManaged DatabasesContainersBillingAPI ReferencePartnersDigitalOcean Partner ProgramsBecome a PartnerPartner Services ProgramMarketplaceHatch Partner ProgramConnect with a PartnerPartner Programs ResourcesCustomer StoriesDigitalOcean Onboarding SeriesTraining for Agencies and FreelancersPrice Estimate CalculatorFeatured Partner ArticlesCloud cost optimization best practicesRead moreHow to choose a cloud providerRead moreDigitalOcean vs. AWS Lightsail: Which Cloud Platform is Right for You?Read moreQuestions?Talk to an expertNew Partnerships1-Click Models powered by Hugging FacePricingLog inLog in to: CommunityDigitalOceanSign upSign up for: CommunityDigitalOceanBlogDocsGet SupportContact SalesLog inLog in to: CommunityDigitalOceanSign upSign up for: CommunityDigitalOceanTutorialsQuestionsProduct DocsCloud ChatsSearch CommunityReport this What is the reason for this report?This undefined is spamThis undefined is offensiveThis undefined is off-topicThis undefined is otherSubmitTable of contentsPrerequisitesStep 1
Installing DockerStep 2
Executing the Docker Command Without Sudo OptionalStep 3
Using the Docker CommandStep 4
Working with Docker ImagesStep 5
Running a Docker ContainerStep 6
Managing Docker ContainersStep 7
Committing Changes in a Container to a Docker ImageStep 8
Pushing Docker Images to a Docker RepositoryDocker vs Docker ComposeTroubleshooting Common Docker Installation IssuesDocker Desktop on Ubuntu BetaInstalling Docker Using a DockerfileHow to Uninstall Docker on UbuntuFrequently Asked QuestionsConclusionTutorialsDockerHow To Install and Use Docker on UbuntuTutorialHow To Install and Use Docker on UbuntuUpdated on May 26, 2025UbuntuDigitalOcean App PlatformDockerBy Brian Hogan, Anish Singh Walia and Vinayak BaranwalLanguageEnglishTable of
contentsPopular topicsIntroduction
Docker is an application that simplifies the process of managing application processes in containers. Containers let you run your applications in resource-isolated processes. Theyâre similar to virtual machines, but containers are more portable, more resource-friendly, and more dependent on the host operating system.
For a detailed introduction to the different components of a Docker container, check out The Docker Ecosystem: An Introduction to Common Components.
In this tutorial, youâll install and use Docker Community Edition (CE) on Ubuntu. Youâll install Docker itself, work with containers and images, and push an image to a Docker Repository. If youâre using Ubuntu 22.04, you can follow our guide on How To Install and Use Docker on Ubuntu 22.04 instead.
Note
This article will walk you through installing Docker on an Ubuntu server. If you wanted a 1-click way to deploy a Docker application to a live server, take a look at DigitalOcean App Platform.
Prerequisites
To follow this tutorial, you will need the following:
One Ubuntu server set up by following the Ubuntu initial server setup guide, including a sudo non-root user and a firewall.
An account on Docker Hub if you wish to create your own images and push them to Docker Hub, as shown in Steps 7 and 8.
Step 1 â Installing Docker
The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we get the latest version, weâll install Docker from the official Docker repository. To do that, weâll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package.
First, update your existing list of packages:
sudo apt update
Next, install a few prerequisite packages which let apt use packages over HTTPS:
sudo apt install apt-transport-https ca-certificates curl software-properties-common
Then add the GPG key for the official Docker repository to your system:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
Add the Docker repository to APT sources:
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
This will also update our package database with the Docker packages from the newly added repo.
Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:
apt-cache policy docker-ce
Youâll see output like this, although the version number for Docker may be different:
Output of apt-cache policy docker-ce
docker-ce:
Installed: (none)
Candidate: 5:19.03.9~3-0~ubuntu-focal
Version table:
5:19.03.9~3-0~ubuntu-focal 500
500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
Notice that docker-ce is not installed, but the candidate for installation is from the Docker repository for Ubuntu (focal).
Finally, install Docker:
sudo apt install docker-ce
Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that itâs running:
sudo systemctl status docker
The output should be similar to the following, showing that the service is active and running:
Output● docker.service - Docker Application Container Engine
Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
Active: active (running) since Tue 2020-05-19 17:00:41 UTC; 17s ago
TriggeredBy: ● docker.socket
Docs: https://docs.docker.com
Main PID: 24321 (dockerd)
Tasks: 8
Memory: 46.4M
CGroup: /system.slice/docker.service
└─24321 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
Installing Docker now gives you not just the Docker service (daemon) but also the docker command line utility, or the Docker client. Weâll explore how to use the docker command later in this tutorial.
Step 2 â Executing the Docker Command Without Sudo (Optional)
By default, the docker command can only be run the root user or by a user in the docker group, which is automatically created during Dockerâs installation process. If you attempt to run the docker command without prefixing it with sudo or without being in the docker group, youâll get an output like this:
Outputdocker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.
See 'docker run --help'.
If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group:
sudo usermod -aG docker ${USER}
To apply the new group membership, log out of the server and back in, or type the following:
su - ${USER}
You will be prompted to enter your userâs password to continue.
Confirm that your user is now added to the docker group by typing:
groups
Outputsammy sudo docker
If you need to add a user to the docker group that youâre not logged in as, declare that username explicitly using:
sudo usermod -aG docker username
The rest of this article assumes you are running the docker command as a user in the docker group. If you choose not to, please prepend the commands with sudo.
Letâs explore the docker command next.
Step 3 â Using the Docker Command
Using docker consists of passing it a chain of options and commands followed by arguments. The syntax takes this form:
docker [option] [command] [arguments]
To view all available subcommands, type:
docker
As of Docker 19, the complete list of available subcommands includes:
Output
attach
Attach local standard input, output, and error streams to a running container
build
Build an image from a Dockerfile
commit
Create a new image from a container's changes
cp
Copy files/folders between a container and the local filesystem
create
Create a new container
diff
Inspect changes to files or directories on a container's filesystem
events
Get real time events from the server
exec
Run a command in a running container
export
Export a container's filesystem as a tar archive
history
Show the history of an image
images
List images
import
Import the contents from a tarball to create a filesystem image
info
Display system-wide information
inspect
Return low-level information on Docker objects
kill
Kill one or more running containers
load
Load an image from a tar archive or STDIN
login
Log in to a Docker registry
logout
Log out from a Docker registry
logs
Fetch the logs of a container
pause
Pause all processes within one or more containers
port
List port mappings or a specific mapping for the container
ps
List containers
pull
Pull an image or a repository from a registry
push
Push an image or a repository to a registry
rename
Rename a container
restart
Restart one or more containers
rm
Remove one or more containers
rmi
Remove one or more images
run
Run a command in a new container
save
Save one or more images to a tar archive (streamed to STDOUT by default)
search
Search the Docker Hub for images
start
Start one or more stopped containers
stats
Display a live stream of container(s) resource usage statistics
stop
Stop one or more running containers
tag
Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
top
Display the running processes of a container
unpause
Unpause all processes within one or more containers
update
Update configuration of one or more containers
version
Show the Docker version information
wait
Block until one or more containers stop, then print their exit codes
To view the options available to a specific command, type:
docker docker-subcommand --help
To view system-wide information about Docker, use:
docker info
Letâs explore some of these commands. Weâll start by working with images.
Step 4 â Working with Docker Images
Docker containers are built from Docker images. By default, Docker pulls these images from Docker Hub, a Docker registry managed by Docker, the company behind the Docker project. Anyone can host their Docker images on Docker Hub, so most applications and Linux distributions youâll need will have images hosted there.
To check whether you can access and download images from Docker Hub, type:
docker run hello-world
The output will indicate that Docker in working correctly:
OutputUnable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
0e03bdcc26d7: Pull complete
Digest: sha256:6a65f928fb91fcfbc963f7aa6d57c8eeb426ad9a20c7ee045538ef34847f44f1
Status: Downloaded newer image for hello-world:latest
Hello from Docker!
This message shows that your installation appears to be working correctly.
...
Docker was initially unable to find the hello-world image locally, so it downloaded the image from Docker Hub, which is the default repository. Once the image downloaded, Docker created a container from the image and the application within the container executed, displaying the message.
You can search for images available on Docker Hub by using the docker command with the search subcommand. For example, to search for the Ubuntu image, type:
docker search ubuntu
The script will crawl Docker Hub and return a listing of all images whose name match the search string. In this case, the output will be similar to this:
OutputNAME
DESCRIPTION
STARS
OFFICIAL
AUTOMATED
ubuntu
Ubuntu is a Debian-based Linux operating sys…
10908
[OK]
dorowu/ubuntu-desktop-lxde-vnc
Docker image to provide HTML5 VNC interface …
428
[OK]
rastasheep/ubuntu-sshd
Dockerized SSH service, built on top of offi…
244
[OK]
consol/ubuntu-xfce-vnc
Ubuntu container with "headless" VNC session…
218
[OK]
ubuntu-upstart
Upstart is an event-based replacement for th…
108
[OK]
ansible/ubuntu14.04-ansible
Ubuntu 14.04 LTS with
...
In the OFFICIAL column, OK indicates an image built and supported by the company behind the project. Once youâve identified the image that you would like to use, you can download it to your computer using the pull subcommand.
Execute the following command to download the official ubuntu image to your computer:
docker pull ubuntu
Youâll see the following output:
OutputUsing default tag: latest
latest: Pulling from library/ubuntu
d51af753c3d3: Pull complete
fc878cd0a91c: Pull complete
6154df8ff988: Pull complete
fee5db0ff82f: Pull complete
Digest: sha256:747d2dbbaaee995098c9792d99bd333c6783ce56150d1b11e333bbceed5c54d7
Status: Downloaded newer image for ubuntu:latest
docker.io/library/ubuntu:latest
After an image has been downloaded, you can then run a container using the downloaded image with the run subcommand. As you saw with the hello-world example, if an image has not been downloaded when docker is executed with the run subcommand, the Docker client will first download the image, then run a container using it.
To see the images that have been downloaded to your computer, type:
docker images
The output will look similar to the following:
OutputREPOSITORY
TAG
IMAGE ID
CREATED
SIZE
ubuntu
latest
1d622ef86b13
3 weeks ago
73.9MB
hello-world
latest
bf756fb1ae65
4 months ago
13.3kB
As youâll see later in this tutorial, images that you use to run containers can be modified and used to generate new images, which may then be uploaded (pushed is the technical term) to Docker Hub or other Docker registries.
Letâs look at how to run containers in more detail.
Step 5 â Running a Docker Container
The hello-world container you ran in the previous step is an example of a container that runs and exits after emitting a test message. Containers can be much more useful than that, and they can be interactive. After all, they are similar to virtual machines, only more resource-friendly.
As an example, letâs run a container using the latest image of Ubuntu. The combination of the -i and -t switches gives you interactive shell access into the container:
docker run -it ubuntu
Your command prompt should change to reflect the fact that youâre now working inside the container and should take this form:
Outputroot@d9b100f2f636:/#
Note the container id in the command prompt. In this example, it is d9b100f2f636. Youâll need that container ID later to identify the container when you want to remove it.
Now you can run any command inside the container. For example, letâs update the package database inside the container. You donât need to prefix any command with sudo, because youâre operating inside the container as the root user:
apt update
Then install any application in it. Letâs install Node.js:
apt install nodejs
This installs Node.js in the container from the official Ubuntu repository. When the installation finishes, verify that Node.js is installed:
node -v
Youâll see the version number displayed in your terminal:
Outputv10.19.0
Any changes you make inside the container only apply to that container.
To exit the container, type exit at the prompt.
Letâs look at managing the containers on our system next.
Step 6 â Managing Docker Containers
After using Docker for a while, youâll have many active (running) and inactive containers on your computer. To view the active ones, use:
docker ps
You will see output similar to the following:
OutputCONTAINER ID
IMAGE
COMMAND
CREATED
In this tutorial, you started two containers; one from the hello-world image and another from the ubuntu image. Both containers are no longer running, but they still exist on your system.
To view all containers â active and inactive, run docker ps with the -a switch:
docker ps -a
Youâll see output similar to this:
1c08a7a0d0e4
ubuntu
"/bin/bash"
2 minutes ago
Exited (0) 8 seconds ago
quizzical_mcnulty
a707221a5f6c
hello-world
"/hello"
6 minutes ago
Exited (0) 6 minutes ago
youthful_curie
To view the latest container you created, pass it the -l switch:
docker ps -l
CONTAINER ID
IMAGE
COMMAND
CREATED
STATUS
PORTS
NAMES
1c08a7a0d0e4
ubuntu
"/bin/bash"
2 minutes ago
Exited (0) 40 seconds ago
quizzical_mcnulty
To start a stopped container, use docker start, followed by the container ID or the containerâs name. Letâs start the Ubuntu-based container with the ID of 1c08a7a0d0e4:
docker start 1c08a7a0d0e4
The container will start, and you can use docker ps to see its status:
OutputCONTAINER ID
IMAGE
COMMAND
CREATED
STATUS
PORTS
NAMES
1c08a7a0d0e4
ubuntu
"/bin/bash"
3 minutes ago
Up 5 seconds
quizzical_mcnulty
To stop a running container, use docker stop, followed by the container ID or name. This time, weâll use the name that Docker assigned the container, which is quizzical_mcnulty:
docker stop quizzical_mcnulty
Once youâve decided you no longer need a container anymore, remove it with the docker rm command, again using either the container ID or the name. Use the docker ps -a command to find the container ID or name for the container associated with the hello-world image and remove it.
docker rm youthful_curie
You can start a new container and give it a name using the --name switch. You can also use the --rm switch to create a container that removes itself when itâs stopped. See the docker run help command for more information on these options and others.
Containers can be turned into images which you can use to build new containers. Letâs look at how that works.
Step 7 â Committing Changes in a Container to a Docker Image
When you start up a Docker image, you can create, modify, and delete files just like you can with a virtual machine. The changes that you make will only apply to that container. You can start and stop it, but once you destroy it with the docker rm command, the changes will be lost for good.
This section shows you how to save the state of a container as a new Docker image.
After installing Node.js inside the Ubuntu container, you now have a container running off an image, but the container is different from the image you used to create it. But you might want to reuse this Node.js container as the basis for new images later.
Then commit the changes to a new Docker image instance using the following command.
docker commit -m "What you did to the image" -a "Author Name" container_id repository/new_image_name
The -m switch is for the commit message that helps you and others know what changes you made, while -a is used to specify the author. The container_id is the one you noted earlier in the tutorial when you started the interactive Docker session. Unless you created additional repositories on Docker Hub, the repository is usually your Docker Hub username.
For example, for the user sammy, with the container ID of d9b100f2f636, the command would be:
docker commit -m "added Node.js" -a "sammy" d9b100f2f636 sammy/ubuntu-nodejs
When you commit an image, the new image is saved locally on your computer. Later in this tutorial, youâll learn how to push an image to a Docker registry like Docker Hub so others can access it.
Listing the Docker images again will show the new image, as well as the old one that it was derived from:
docker images
Youâll see output like this:
OutputREPOSITORY
TAG
IMAGE ID
CREATED
SIZE
sammy/ubuntu-nodejs
latest
7c1f35226ca6
7 seconds ago
179MB
...
In this example, ubuntu-nodejs is the new image, which was derived from the existing ubuntu image from Docker Hub. The size difference reflects the changes that were made. And in this example, the change was that NodeJS was installed. So next time you need to run a container using Ubuntu with NodeJS pre-installed, you can just use the new image.
You can also build Images from a Dockerfile, which lets you automate the installation of software in a new image. However, thatâs outside the scope of this tutorial.
Now letâs share the new image with others so they can create containers from it.
Step 8 â Pushing Docker Images to a Docker Repository
The next logical step after creating a new image from an existing image is to share it with a select few of your friends, the whole world on Docker Hub, or other Docker registry that you have access to. To push an image to Docker Hub or any other Docker registry, you must have an account there.
This section shows you how to push a Docker image to Docker Hub. To learn how to create your own private Docker registry, check out How To Set Up a Private Docker Registry on Ubuntu or How To Set Up a Private Docker Registry on Ubuntu.
To push your image, first log into Docker Hub.
docker login -u docker-registry-username
Youâll be prompted to authenticate using your Docker Hub password. If you specified the correct password, authentication should succeed.
Note: If your Docker registry username is different from the local username you used to create the image, you will have to tag your image with your registry username. For the example given in the last step, you would type:
docker tag sammy/ubuntu-nodejs docker-registry-username/ubuntu-nodejs
Then you may push your own image using:
docker push docker-registry-username/docker-image-name
To push the ubuntu-nodejs image to the sammy repository, the command would be:
docker push sammy/ubuntu-nodejs
The process may take some time to complete as it uploads the images, but when completed, the output will look like this:
OutputThe push refers to a repository [docker.io/sammy/ubuntu-nodejs]
e3fbbfb44187: Pushed
5f70bf18a086: Pushed
a3b5c80a4eba: Pushed
7f18b442972b: Pushed
3ce512daaf78: Pushed
7aae4540b42d: Pushed
...
After pushing an image to a registry, it should be listed on your accountâs dashboard, like that show in the image below.
If a push attempt results in an error of this sort, then you likely did not log in:
OutputThe push refers to a repository [docker.io/sammy/ubuntu-nodejs]
e3fbbfb44187: Preparing
5f70bf18a086: Preparing
a3b5c80a4eba: Preparing
7f18b442972b: Preparing
3ce512daaf78: Preparing
7aae4540b42d: Waiting
unauthorized: authentication required
Log in with docker login and repeat the push attempt. Then verify that it exists on your Docker Hub repository page.
You can now use docker pull sammy/ubuntu-nodejs to pull the image to a new machine and use it to run a new container.
Docker vs Docker Compose
While Docker lets you build and run containers, managing multi-container applications with just Docker can be tedious. Thatâs where Docker Compose comes in.
Docker Compose is a tool for defining and running multi-container Docker applications using a YAML file. Instead of manually running separate containers for a web server, database, and caching layer, you can define them all in a docker-compose.yml file and run them with:
docker-compose up
For a detailed guide on using Docker Compose, including how to set up complex multi-container applications and manage their configurations, check out our tutorial on How To Install and Use Docker Compose on Ubuntu. This guide will walk you through creating and managing multi-container applications with Docker Compose, from basic setups to more complex configurations.
Feature
Docker CLI
Docker Compose
Usage
Single container operations
Multi-container orchestration
Configuration
CLI commands
YAML configuration file
Dependency handling
Manual
Handles linked services automatically
Best use case
Testing isolated containers
Local development and staging setups
For more, see How To Install and Use Docker Compose on Ubuntu.
Troubleshooting Common Docker Installation Issues
Problem: docker: command not found
Fix: The Docker CLI isnât in your $PATH. Reinstall Docker or ensure /usr/bin is included.
sudo apt install docker-ce docker-ce-cli containerd.io
Problem: Cannot connect to the Docker daemon
Fix: Docker isnât running, or your user isnât in the docker group.
sudo systemctl start docker
sudo usermod -aG docker $USER
Then log out and log back in.
Problem: GPG key or repository error
Fix: If the keyserver or Docker GPG key changes, refer to Dockerâs official docs for the latest key and repository steps. If youâre using Ubuntu 22.04, you may want to check our guide on How To Install and Use Docker on Ubuntu 22.04 for version-specific instructions. For automated installation that can help avoid these issues, consider using our guide on How To Use Ansible to Install and Set Up Docker on Ubuntu.
Docker Desktop on Ubuntu (Beta)
Docker Desktop is now available in beta for Linux distributions like Ubuntu. It provides a GUI, bundled Docker Engine, and Kubernetes support.
To install Docker Desktop on Ubuntu:
sudo apt install ./docker-desktop-<version>-<arch>.deb
Refer to Docker Desktop for Linux docs for prerequisites and download links.
Note: Docker Desktop is suited for development environments. For server-side installs, use Docker CE.
Installing Docker Using a Dockerfile
For automated environments, install Docker using a Dockerfile. Hereâs an example:
FROM ubuntu:20.04
RUN apt-get update && \
apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
add-apt-repository \
"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable" && \
apt-get update && \
apt-get install -y docker-ce docker-ce-cli containerd.io
For more advanced automation options, you can also use Ansible to install and configure Docker. Check out our guide on How To Use Ansible to Install and Set Up Docker on Ubuntu. This is particularly useful if you need to manage Docker installations across multiple servers or want to maintain consistent configurations in your infrastructure.
How to Uninstall Docker on Ubuntu
To remove Docker from your system, run:
sudo apt purge docker-ce docker-ce-cli containerd.io
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
Frequently Asked Questions
1. What is the best way to install Docker on Ubuntu?
The recommended and most reliable way to install Docker on Ubuntu is by using Dockerâs official repository. This approach ensures you always receive the latest stable version, complete with security patches and updates directly from Docker. To do this, you first update your package index and install prerequisites like apt-transport-https, ca-certificates, curl, gnupg, and lsb-release. Next, you add Dockerâs official GPG key and set up the stable repository. After updating your package index again, you can install Docker Engine and related components using
sudo apt install docker-ce docker-ce-cli containerd.io
This method is preferred over using the default Ubuntu repositories, which may contain outdated versions. By following Dockerâs official installation steps, you ensure compatibility with the latest features, bug fixes, and security enhancements, making your Docker experience on Ubuntu both robust and secure.
2. Do I need sudo to run Docker commands?
By default, Docker requires root privileges to run its commands, which means you need to prepend sudo to every Docker command. However, you can avoid this by adding your user to the docker group, which grants permission to run Docker commands without sudo. To do this, execute
sudo usermod -aG docker $USER
and then log out and log back in for the changes to take effect. This step modifies your userâs group memberships, allowing Docker to be run as a non-root user. Keep in mind that adding users to the docker group grants them root-level access to the Docker daemon, so only add trusted users. If you skip this step, youâll encounter permission errors when running Docker commands without sudo. For security and convenience, itâs best to add your user to the docker group if you use Docker frequently.
3. How do I verify if Docker is running correctly?
To confirm that Docker is installed and running properly on your Ubuntu system, you can use a couple of simple commands. First, run
docker info
to display detailed information about the Docker installation, including server version, storage driver, and running containers. If Docker is running, this command will return a wealth of information; if not, youâll see an error. Another common test is to run
docker run hello-world
This command downloads a test image from Docker Hub and runs it in a container. If everything is set up correctly, youâll see a message indicating that Docker is working as expected. If you encounter errors, check that the Docker service is running with
sudo systemctl status docker
and review any error messages for troubleshooting. These steps help ensure your Docker installation is functional and ready for use.
4. Can I install a specific version of Docker?
Yes, you can install a specific version of Docker on Ubuntu, which is useful if you need compatibility with certain applications or want to avoid the latest changes. First, list all available Docker versions in the repository using
apt-cache madison docker-ce
This command will display a list of version strings. Once you identify the desired version, install it by running
sudo apt install docker-ce=<VERSION_STRING>
replacing <VERSION_STRING> with the exact version number (for example, 5:20.10.7~3-0~ubuntu-focal). This approach ensures you have precise control over the Docker version on your system. Remember to also specify matching versions for
docker-ce-cli
and
containerd.io
if needed. Pinning a specific version can help maintain stability in production environments or when working with legacy projects that require a particular Docker release.
5. Whatâs the difference between Docker and Docker Compose?
Docker and Docker Compose are related but serve different purposes. Docker is a platform that allows you to build, ship, and run individual containers, each encapsulating an application and its dependencies. Itâs ideal for running single services or applications in isolation. Docker Compose, on the other hand, is a tool designed to define and manage multi-container applications. With Compose, you use a YAML file (docker-compose.yml) to specify how multiple containers should interact, their configurations, networks, and volumes. This makes it easy to orchestrate complex applications consisting of several interconnected services, such as a web server, database, and cache. While Docker alone is sufficient for simple use cases, Docker Compose streamlines the process of managing multi-container setups, making development, testing, and deployment of complex applications much more efficient and reproducible.
6. How do I remove Docker from my system?
To completely uninstall Docker from your Ubuntu system, you need to remove the Docker packages and delete any associated data. Start by running
sudo apt purge docker-ce docker-ce-cli containerd.io
to remove the Docker Engine, CLI, and container runtime. This command deletes the installed packages but leaves configuration files and data directories intact. To fully clean up, remove Dockerâs data directories with
sudo rm -rf /var/lib/docker
and
sudo rm -rf /var/lib/containerd
These directories store images, containers, volumes, and other persistent data. If you added your user to the docker group, you may also want to remove the group with
sudo groupdel docker
After these steps, Docker and all its data will be removed from your system. Always back up important data before uninstalling to avoid accidental loss.
7. Is Docker Desktop available for Ubuntu, and should I use it?
Yes, Docker Desktop is now available in beta for Linux distributions, including Ubuntu. Docker Desktop provides a graphical user interface (GUI) for managing containers, images, volumes, and networks, making it easier for users who prefer not to work exclusively with the command line. It also bundles the Docker Engine and offers integrated Kubernetes support, which is useful for development and testing environments. To install Docker Desktop on Ubuntu, download the appropriate .deb package from Dockerâs official website and install it using
sudo apt install ./docker-desktop-<version>-<arch>.deb
However, Docker Desktop is primarily intended for development and not recommended for production servers. For server-side or headless environments, itâs better to use Docker Engine Community Edition (CE) via the command line. Always check Dockerâs documentation for prerequisites and the latest installation instructions before proceeding.
Conclusion
In this comprehensive tutorial, youâve successfully installed Docker on Ubuntu, mastered the fundamentals of container management, and learned how to work with Docker images and containers. Youâve also gained hands-on experience with Docker Hub by pushing a modified image to the registry. These skills form a solid foundation for container-based development and deployment. To further enhance your Docker expertise, we encourage you to explore the other Docker tutorials in the DigitalOcean Community, where youâll find advanced topics like container orchestration, networking, and security best practices.
Thanks for learning with the DigitalOcean Community. Check out our offerings for compute, storage, networking, and managed databases.
Learn more about our productsAbout the author(s)Brian HoganAuthorSee author profileManaged the Write for DOnations program, wrote and edited community articles, and makes things on the Internet. Expertise in DevOps areas including Linux, Ubuntu, Debian, and more. See author profileAnish Singh WaliaAuthorSr Technical WriterSee author profileI help Businesses scale with AI x SEO x (authentic) Content that revives traffic and keeps leads flowing | 3,000,000+ Average monthly readers on Medium | Sr Technical Writer @ DigitalOcean | Ex-Cloud Consultant @ AMEX | Ex-Site Reliability Engineer(DevOps)@NutanixSee author profileVinayak BaranwalEditorSee author profileBuilding future-ready infrastructure with Linux, Cloud, and DevOps. Full Stack Developer & System Administrator @ DigitalOcean | GitHub Contributor | Passionate about Docker, PostgreSQL, and Open Source | Exploring NLP & AI-TensorFlow | Nailed over 50+ deployments across production environments.See author profileCategory:TutorialTags:UbuntuDigitalOcean App PlatformDockerStill looking for an answer?Ask a questionSearch for more helpWas this helpful?YesNoComments(10)Follow-up questions(0)ï»¿This textbox defaults to using Markdown to format your answer.You can type !ref in this text area to quickly search our full set of tutorials, documentation & marketplace offerings and insert the link!Sign in/up to commentstefanRunJune 11, 2020Show lessI have installed Ubuntu 20.04 server and am struggling to install Docker.
I am getting stuck on the step to add the GPG key for the official Docker repository; when I run this command:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
I get this response:
curl: (7) Failed to connect to download.docker.com port 443: No route to host
gpg: no valid OpenPGP data found.
I canât work out how to move forward, so any ideas would be appreciated, thanks in advance.
ReplyHugh RJune 23, 2020Show lessI have a brand new droplet and there appears to be something wrong with the âstableâ release using these instructions. When I run sudo systemctl status docker I get a bunch of error and it throws me into Vi:
â docker.service - Docker Application Container Engine
Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
Active: active (running) since Tue 2020-06-23 20:47:38 AEST; 15s ago
TriggeredBy: â docker.socket
Docs: https://docs.docker.com
Main PID: 20339 (dockerd)
Tasks: 8
Memory: 34.7M
CGroup: /system.slice/docker.service
ââ20339 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.156277373+10:00" level=warning msg="Your kernel does not support cgroup rt runtime"
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.156436943+10:00" level=warning msg="Your kernel does not support cgroup blkio weigh>
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.156588335+10:00" level=warning msg="Your kernel does not support cgroup blkio weigh>
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.156960819+10:00" level=info msg="Loading containers: start."
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.420014263+10:00" level=info msg="Default bridge (docker0) is assigned with an IP ad>
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.643617453+10:00" level=info msg="Loading containers: done."
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.729797979+10:00" level=info msg="Docker daemon" commit=48a66213fe graphdriver(s)=ov>
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.730768864+10:00" level=info msg="Daemon has completed initialization"
Jun 23 20:47:38 projects systemd[1]: Started Docker Application Container Engine.
Jun 23 20:47:38 projects dockerd[20339]: time="2020-06-23T20:47:38.776191749+10:00" level=info msg="API listen on /run/docker.sock"
Although the last message claims Docker has started, I canât run any containers. Any suggestions would be great.
Replytjonezs54sJanuary 15, 2021Show lessThxâ¦ Nice Demoâ¦ worked right out of the boxâ¦ easy to followâ¦
ReplyattandJanuary 17, 2021Show lesssudo add-apt-repository âdeb [arch=amd64] https://download.docker.com/linux/ubuntu focal stableâ
When I run the above command on an Ubuntu 20.4 instance on AWS,
then i get the following response
"E: The repository âhttps://download.docker.com/linux/ubuntu/gpg focal Releaseâ does not have a Release file.
N: Updating from such a repository canât be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
"
I am trying this on January 2021, about 6 months after the article. Yet the Release file is not available.
How should we proceed
ReplykhashashinFebruary 27, 2021Show lessThx very helpful tutorial. However I got error during apt-key command
Warning: apt-key is deprecated.
ReplyswapansanjayApril 15, 2021Show lessI have installed ubuntu 20.04 from ubuntu official website and Docker desktop from Docker offical website.
When I try checking the status of docker using the command -
sudo systemctl status docker
It fails with the message -
System has not been booted with systemd as init system (PID 1). Canât operate.
Failed to connect to bus: Host is down
I would request Brian Hogan(original poster of this page) to help solve this issue first as rest of the process does not hold any meaning for me.
This issue of systemctl and systemd not available with WSL2 is a general issue and needs to be fixed first before venturing into installing docker
through ubuntu 20.04
Thanks.
ReplyManuel AvelarJuly 15, 2021Show lessAnyone knows why this error?
E: gnupg, gnupg2 and gnupg1 do not seem to be installed, but one of them is required for this operation
% Total
% Received % Xferd
Average Speed
Time
Time
Time
Current
Dload
Upload
Total
Spent
Left
Speed
100
983
100
983
0
0
8776
0 --:--:-- --:--:-- --:--:--
8776
(23) Failed writing body
ReplyhadesunseennNovember 21, 2021Show lessThanks for sharing, worked great.
Replyadsk2050March 3, 2022This comment has been deleted
abdulaziz bin saeedApril 27, 2022Show lessAfter running the Command:
docker run hello-world
I Get this massage:
docker: error pulling image configuration: download failed after attempts=6: net/http: TLS handshake timeout.
âUbuntu 20.04.4 LTSâ
ReplyLoad more commentsThis work is licensed under a Creative Commons Attribution-NonCommercial- ShareAlike 4.0 International License.Deploy on DigitalOceanClick below to sign up for DigitalOcean's virtual machines, Databases, and AIML products.Sign upPopular TopicsAI/MLUbuntuLinux BasicsJavaScriptPythonMySQLDockerKubernetesAll tutorialsTalk to an expertFeatured tutorialsSOLID Design Principles Explained: Building Better Software ArchitectureHow To Remove Docker Images, Containers, and VolumesHow to Create a MySQL User and Grant Privileges (Step-by-Step)All tutorialsAll topic tagsJoin the Tech TalkSuccess! Thank you! Please check your email for further details.Please complete your information!Table of contentsPrerequisitesStep 1 â Installing DockerStep 2 â Executing the Docker Command Without Sudo (Optional)Step 3 â Using the Docker CommandStep 4 â Working with Docker ImagesStep 5 â Running a Docker ContainerStep 6 â Managing Docker ContainersStep 7 â Committing Changes in a Container to a Docker ImageStep 8 â Pushing Docker Images to a Docker RepositoryDocker vs Docker ComposeTroubleshooting Common Docker Installation IssuesDocker Desktop on Ubuntu (Beta)Installing Docker Using a DockerfileHow to Uninstall Docker on UbuntuFrequently Asked QuestionsConclusionDeploy on DigitalOceanClick below to sign up for DigitalOcean's virtual machines, Databases, and AIML products.Sign upPopular TopicsAI/MLUbuntuLinux BasicsJavaScriptPythonMySQLDockerKubernetesAll tutorialsTalk to an expertFeatured tutorialsSOLID Design Principles Explained: Building Better Software ArchitectureHow To Remove Docker Images, Containers, and VolumesHow to Create a MySQL User and Grant Privileges (Step-by-Step)All tutorialsAll topic tagsBecome a contributor for communityGet paid to write technical tutorials and select a tech-focused charity to receive a matching donation.Sign UpDigitalOcean DocumentationFull documentation for every DigitalOcean product.Learn moreResources for startups and SMBsThe Wave has everything you need to know about building a business, from raising funding to marketing your product.Learn moreGet our newsletterStay up to date by signing up for DigitalOceanâs Infrastructure as a Newsletter.SubmitSubmitNew accounts only. By submitting your email you agree to our Privacy PolicyThe developer cloudScale up as you grow â whether you're running one virtual machine or ten thousand.View all productsGet started for freeSign up and get $200 in credit for your first 60 days with DigitalOcean.*Get started*This promotional offer applies to new accounts only.CompanyAboutLeadershipBlogCareersCustomersPartnersReferral ProgramAffiliate ProgramPressLegalPrivacy PolicySecurityInvestor RelationsProductsOverviewDropletsKubernetesFunctionsApp PlatformGradientâ¢ AI GPU DropletsGradientâ¢ AI Bare Metal GPUsGradientâ¢ AI 1-Click Models Gradientâ¢ AI PlatformLoad BalancersManaged DatabasesSpacesBlock StorageAPIUptimeIdentity and Access ManagementCloudwaysResourcesCommunity TutorialsCommunity Q&ACSS-TricksWrite for DOnationsCurrents ResearchHatch Startup ProgramWavemakers ProgramCompass CouncilOpen SourceNewsletter SignupMarketplacePricingPricing CalculatorDocumentationRelease NotesCode of ConductShop SwagSolutionsWebsite HostingVPS HostingWeb & Mobile AppsGame DevelopmentStreamingVPNSaaS PlatformsCloud Hosting for BlockchainStartup ResourcesMigration AssistanceContactSupportSalesReport AbuseSystem StatusShare your ideasCompanyAboutLeadershipBlogCareersCustomersPartnersReferral ProgramAffiliate ProgramPressLegalPrivacy PolicySecurityInvestor RelationsProductsOverviewDropletsKubernetesFunctionsApp PlatformGradientâ¢ AI GPU DropletsGradientâ¢ AI Bare Metal GPUsGradientâ¢ AI 1-Click Models Gradientâ¢ AI PlatformLoad BalancersManaged DatabasesSpacesBlock StorageAPIUptimeIdentity and Access ManagementCloudwaysResourcesCommunity TutorialsCommunity Q&ACSS-TricksWrite for DOnationsCurrents ResearchHatch Startup ProgramWavemakers ProgramCompass CouncilOpen SourceNewsletter SignupMarketplacePricingPricing CalculatorDocumentationRelease NotesCode of ConductShop SwagSolutionsWebsite HostingVPS HostingWeb & Mobile AppsGame DevelopmentStreamingVPNSaaS PlatformsCloud Hosting for BlockchainStartup ResourcesMigration AssistanceContactSupportSalesReport AbuseSystem StatusShare your ideasÂ© 2025 DigitalOcean, LLC.Sitemap.