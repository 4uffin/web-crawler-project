WebAssembly | MDN
Skip to main content
Skip to search
MDN
HTML
HTML: Markup language
HTML reference
Elements
Global attributes
Attributes
See allâ¦
HTML guides
Responsive images
HTML cheatsheet
Date & time formats
See allâ¦
Markup languages
SVG
MathML
XML
CSS
CSS: Styling language
CSS reference
Properties
Selectors
At-rules
Values & units
See allâ¦
CSS guides
Box model
Animations
Flexbox
Colors
See allâ¦
Layout cookbook
Column layouts
Centering an element
Card component
See allâ¦
JavaScript
JS
JavaScript: Scripting language
JS reference
Standard built-in objects
Expressions & operators
Statements & declarations
Functions
See allâ¦
JS guides
Control flow & error handing
Loops and iteration
Working with objects
Using classes
See allâ¦
Web APIs
Web APIs: Programming interfaces
Web API reference
File system API
Fetch API
Geolocation API
HTML DOM API
Push API
Service worker API
See allâ¦
Web API guides
Using the Web animation API
Using the Fetch API
Working with the History API
Using the Web speech API
Using web workers
All
All web technology
Technologies
Accessibility
HTTP
URI
Web extensions
WebAssembly
WebDriver
See allâ¦
Topics
Media
Performance
Privacy
Security
Progressive web apps
Learn
Learn web development
Frontend developer course
Getting started
Common questions
Curriculum
Learn HTML
Introduction to HTML
Getting started with HTML
Learn CSS
What is CSS
Getting started with CSS
Learn JavaScript
How to use data attributes
Add JavaScript to your web page
Tools
Discover our tools
Playground
HTTP Observatory
Color picker
Box-shadow generator
Border-image generator
Border-radius generator
About
Get to know MDN better
About MDN
Advertise with us
Community
MDN on GitHub
Blog
WebAssembly
WebAssembly
WebAssembly is a type of code that can be run in modern web browsers.
It is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web.
It is also designed to run alongside JavaScript, allowing both to work together.
WebAssembly is designed to complement and run alongside JavaScript â using the WebAssembly JavaScript APIs, you can load WebAssembly modules into a JavaScript app and share functionality between the two. This allows you to take advantage of WebAssembly's performance and power and JavaScript's expressiveness and flexibility in the same app, even if you don't know how to write WebAssembly code.
WebAssembly has big implications for the web platform, not only because it provides a way for code written in multiple languages to run on the web at near-native speed, but also because it enables client apps to run on the web that previously could not.
And what's even better is that it is being developed as a web standard via the W3C WebAssembly Working Group and Community Group with active participation from all major browser vendors.
In this article
GuidesAPI referenceExample projectsSpecificationsBrowser compatibilitySee also
Guides
The WebAssembly guides cover topics such as high-level concepts, compiling from different languages, the textual representation of the Wasm binary format, and how to run WebAssembly.
WebAssembly concepts
Get started by reading the high-level concepts behind WebAssembly â what it is, why it is so useful, how it fits into the web platform (and beyond), and how to use it.
Compiling a new C/C++ module to WebAssembly
When you've written code in C/C++, you can then compile it into Wasm using a tool like Emscripten. Let's look at how it works.
Compiling an existing C module to WebAssembly
A core use-case for WebAssembly is to take the existing ecosystem of C libraries and allow developers to use them on the web.
Compiling from Rust to WebAssembly
If you've written some Rust code, you can compile it into WebAssembly! This tutorial takes you through all you need to know to compile a Rust project to Wasm and use it in an existing web app.
Loading and running WebAssembly code
After you have a Wasm module, this article covers how to fetch, compile and instantiate it, combining the WebAssembly JavaScript API with the Fetch or XHR APIs.
Using the WebAssembly JavaScript API
Once you've loaded a Wasm module, you'll want to use it. In this article, we show you how to use WebAssembly via the WebAssembly JavaScript API.
Exported WebAssembly functions
Exported WebAssembly functions are the JavaScript reflections of WebAssembly functions, which allow calling WebAssembly code from JavaScript. This article describes what they are.
Understanding WebAssembly text format
This article explains the Wasm text format. This is the low-level textual representation of a Wasm module shown in browser developer tools when debugging.
Converting WebAssembly text format to Wasm
This article provides a guide on how to convert a WebAssembly module written in text format into a Wasm binary.
API reference
WebAssembly instruction reference
Reference documentation with interactive samples for the set of WebAssembly operators.
WebAssembly JavaScript interface
This object acts as the namespace for all WebAssembly-related functionality.
WebAssembly.Global()
A WebAssembly.Global object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more WebAssembly.Module instances. This allows dynamic linking of multiple modules.
WebAssembly.Module()
A WebAssembly.Module object contains stateless WebAssembly code that has already been compiled by the browser and can be efficiently shared with Workers, and instantiated multiple times.
WebAssembly.Instance()
A WebAssembly.Instance object is a stateful, executable instance of a Module. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.
WebAssembly.compile()
The WebAssembly.compile() function compiles WebAssembly binary code into a WebAssembly.Module object.
WebAssembly.compileStreaming()
The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source.
WebAssembly.instantiate()
The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code.
WebAssembly.instantiateStreaming()
The WebAssembly.instantiateStreaming() function is the primary API for compiling and instantiating WebAssembly code, returning both a Module and its first Instance.
WebAssembly.validate()
The WebAssembly.validate() function validates a given typed array of WebAssembly binary code.
WebAssembly.Memory()
A WebAssembly.Memory object is a resizable ArrayBuffer that holds the raw bytes of memory accessed by an Instance.
WebAssembly.Table()
A WebAssembly.Table object is a resizable typed array of opaque values, like function references, that are accessed by an Instance.
WebAssembly.Tag()
The WebAssembly.Tag object defines a type of WebAssembly exception that can be thrown to/from WebAssembly code.
WebAssembly.Exception()
The WebAssembly.Exception object represents a runtime exception thrown from WebAssembly to JavaScript, or thrown from JavaScript to a WebAssembly exception handler.
WebAssembly.CompileError()
Creates a new WebAssembly CompileError object.
WebAssembly.LinkError()
Creates a new WebAssembly LinkError object.
WebAssembly.RuntimeError()
Creates a new WebAssembly RuntimeError object.
Example projects
WASMSobel
See our webassembly-examples repo for a number of other examples.
Specifications
Specification
WebAssembly JavaScript Interface# webassembly-namespace
WebAssembly JavaScript Interface# ref-for-syntax-numtypeâ âª
WebAssembly JavaScript Interface# dom-globaldescriptor-mutable
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
Unknown specification
WebAssembly Core: Garbage Collection# garbage-collectionâ
Browser compatibility
webassembly.api
webassembly.BigInt-to-i64-integration
webassembly.bulk-memory-operations
webassembly.exception-handling
webassembly.extended-constant-expressions
webassembly.fixed-width-SIMD
webassembly.garbage-collection
webassembly.multiMemory
webassembly.multi-value
webassembly.mutable-globals
webassembly.non-trapping-float-to-int-conversions
webassembly.reference-types
webassembly.sign-extension-operations
webassembly.tail-calls
webassembly.threads-and-atomics
See also
WebAssembly on Mozilla Research
webassembly.org
WebAssembly articles on Mozilla Hacks blog
W3C WebAssembly Community Group
Emscripting a C Library to Wasm
Help improve MDN
Learn how to contribute
This page was last modified on â¨Jun 7, 2025â© by MDN contributors.
View this page on GitHub â¢ Report a problem with this content
WebAssemblyGuidesWebAssembly conceptsCompiling from C/C++ to WebAssemblyCompiling an existing C module to WebAssemblyCompiling from Rust to WebAssemblyUsing the WebAssembly JavaScript APIUnderstanding WebAssembly text formatConverting WebAssembly text formatLoading and running WebAssembly codeExported WebAssembly functionsJavaScript builtinsImported global string constantsReferenceJavaScript interfaceWebAssemblyWebAssembly.compile()WebAssembly.compileStreaming()WebAssembly.instantiate()WebAssembly.instantiateStreaming()WebAssembly.validate()WebAssembly.ModuleWebAssembly.Module.customSections()WebAssembly.Module.exports()WebAssembly.Module.imports()WebAssembly.Module() constructorWebAssembly.GlobalWebAssembly.Global() constructorWebAssembly.InstanceWebAssembly.Instance.prototype.exportsWebAssembly.Instance() constructorWebAssembly.MemoryWebAssembly.Memory.prototype.bufferWebAssembly.Memory.prototype.grow()WebAssembly.Memory() constructorWebAssembly.TableWebAssembly.Table.prototype.get()WebAssembly.Table.prototype.grow()WebAssembly.Table.prototype.lengthWebAssembly.Table.prototype.set()WebAssembly.Table() constructorWebAssembly.TagWebAssembly.Tag.prototype.type()WebAssembly.Tag() constructorWebAssembly.ExceptionWebAssembly.Exception constructorWebAssembly.Exception.prototype.getArg()WebAssembly.Exception.prototype.is()WebAssembly.Exception.prototype.stack
Non-standard
WebAssembly.CompileErrorWebAssembly.CompileError() constructorWebAssembly.LinkErrorWebAssembly.LinkError() constructorWebAssembly.RuntimeErrorWebAssembly.RuntimeError() constructorInstructionsControl flowblockbrbr_ifbr_tablecallDropendif...elseloopnopreturnSelectunreachableMemorycopyfillgrowloadsizestoreNumericAbsoluteAdditionANDCeilConstConvertCopy signCount leading zerosCount trailing zerosDemoteDivisionEqualExtendFloorGreater or equalGreater thanLeft rotateLeft shiftLess or equalLess thanMaxMinMultiplicationNearestNegateNot equalORPopulation countPromoteReinterpretRemainderRight rotateRight shiftSquare rootSubtractionTruncate (float to float)Truncate (float to int)WrapXORVariablesGlobalGlobal getGlobal setLocalLocal getLocal setLocal tee
Your blueprint for a better internet.
MDN
About
Blog
Mozilla careers
Advertise with us
MDN Plus
Product help
Contribute
MDN Community
Community resources
Writing guidelines
MDN Discord
MDN on GitHub
Developers
Web technologies
Learn web development
Guides
Tutorials
Glossary
Hacks blog
Website Privacy Notice
Cookies
Legal
Community Participation Guidelines
Visit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.
Portions of this content are Â©1998ââ¨2025â© by individual mozilla.org contributors. Content available under a Creative Commons license.