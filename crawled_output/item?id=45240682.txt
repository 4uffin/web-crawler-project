Writing an operating system kernel from scratch | Hacker NewsHacker Newsnew | past | comments | ask | show | jobs | submitloginWriting an operating system kernel from scratch (popovicu.com)75 points by Bogdanp 2 hours ago
| hide | past | favorite | 11 comments
lordleft 1 hour ago
| next [–]
I will never not find this kind of project incredibly impressive. It’s interesting to think that Linux, after all, is really just the kernel — and yet getting that work done paved the way to getting an open source version of Unix installed on billions of machines. Great stuff!replySomeone 5 minutes ago
| parent | next [–]
> I will never not find this kind of project incredibly impressiveI wouldn’t call it incredibly impressive. The path on how to write a minimal multi-tasking kernel has been beaten decades ago.Writing a kernel that can boot and do a few things is ‘just’ a matter of being somewhat smart and have some perseverance. Doing it for RISC-V complicates things a bit compared to x86, but there, too, the information about initialising the hardware often is easily obtained (for example: https://wiki.osdev.org/RISC-V_Meaty_Skeleton_with_QEMU_virt_... I wouldn’t know whether this project used that)I think the author agrees, given (FTA) that they wrote “This is a redo of an exercise I did for my undergraduate course in operating systems”It’s work, may be nice work, but I think everybody with a degree in software engineering could do this. Yes, the OS likely will have bugs, certainly will have rough edges, but getting something that can multi-process, with processes shielded from each other by a MMU isn’t hard anymore.replydiath 11 minutes ago
| parent | prev | next [–]
It's even more funny and amusing when you remember that in the initial release mail for Linux, Torvals said "just a hobby, won't be big and
professional like gnu".https://groups.google.com/g/comp.os.minix/c/dlNtH7RRrGA/m/Sw...replyhollerith 1 hour ago
| parent | prev | next [–]
It is equally valid to say that Stallman's starting to write a C compiler and Unix utilities (in 1984 whereas the Linux project started in late 1991) paved the way to getting an open source version of Unix installed on billions of machines.replykimixa 32 minutes ago
| root | parent | next [–]
I agree - there's a number of kernels that were "open source" and released at a similar time enough time to linux (e.g. 386BSD in '92) that I could see any of those winning the "community battle" and taking that space instead, but no real credible "development toolchain" equivalent until decades later.Though I'm unsure how differing licenses might have affected this - I suspect that really early in it's development the "copyleft" nature of the GPL Linux didn't make as much of a difference, as from what I remember most commercial uses of Linux didn't come until it had already gained significant momentum.replytreyd 12 minutes ago
| root | parent | next [–]
The copyleft nature was essential to good driver support.
It set it up such that for corporations making drivers the easiest path was to get the driver upstreamed.
There was a bunch of hoops they could have gone through to avoid that (as many did, like Nvidia) but that became a sorta-default.Copyleft encourages a collaborative relationship between entities because it makes trying to play it close to the chest with IP involve more legal effort (if it's possible at all).replykimixa 2 minutes ago
| root | parent | next [–]
Yes, I can see that stalling development as (at best) it turns into a pile of private forks rather than a cohesive project, but from what I remember that was already after Linux had "won" the "Open Source Kernel" race.Commercial support for Linux was... Sparse... before the early 2000s.WD-42 1 hour ago
| prev | next [–]
Zig really is amenable to OS development. And so is RISC-V. I started this same exercise except with x86 first. I quickly got annoyed with all the legacy boilerplate required. RISC-v doesn’t have any of that. It’s so much faster to get up and running. Here’s my bad zig: https://github.com/Fingel/aeros-vreplytoast0 40 minutes ago
| parent | next [–]
> with x86 first. I quickly got annoyed with all the legacy boilerplate required.IMHO, if you use a reasonable bootloader, you don't have too much boilerplate. Multiboot loaders do leave you in real mode, and most people want to be in protected mode, so you have to set up some tables and do a jump, but that's not that much boilerplate. There's a bit more stuff if you disable legacy interrupt controllers (which you probably want to) but it seems to me being able to maybe run on a regular pc is worth it (caveats about console interfaces apply... my hobby OS
needs bios boot and uses some vga things that I found aren't well supported... serial console is easier, but lots of computers don't have a serial port either)replychris_wot 49 minutes ago
| prev [–]
How does one get their hands on low-cost RISC hardware?replyRzor 34 minutes ago
| parent [–]
There's this $10 board on Aliexpress called Milk-V Duo S. It's been popping up on my recs every now and then. Looks interesting.https://aliexpress.com/w/wholesale-Milk%2525252dV-Duo-S.htmlTaken directly from its description:>Milk-V Duo S is an upgraded model of Duo with an upgraded SG2000 master with a larger 512MB RAM and extended IO capability>Onboard WI-FI6/BT5(Model Milk-V-Duo-S-512M-Basic/Milk-V-Duo-S-512M-eMMC does not have this function)>USB 2.0 HOST port>100 Mbps Ethernet Portwith PoE Support (via PoE HAT)>Dual MIPI CSI with ISP>The device also supports switch between RISC-V and ARM boot via a switchreply
Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact
Search: