Learn the Basics — PyTorch Tutorials 2.8.0+cu128 documentation
Learn
Get Started
Tutorials
Learn the Basics
PyTorch Recipes
Intro to PyTorch - YouTube Series
Webinars
Community
Landscape
Join the Ecosystem
Community Hub
Forums
Developer Resources
Contributor Awards
Community Events
PyTorch Ambassadors
Projects
PyTorch
vLLM
DeepSpeed
Host Your Project
Docs
PyTorch
Domains
Blogs & News
Blog
Announcements
Case Studies
Events
Newsletter
About
PyTorch Foundation
Members
Governing Board
Technical Advisory Council
Cloud Credit Program
Staff
Contact
JOIN
Learn
Get Started
Tutorials
Learn the Basics
PyTorch Recipes
Introduction to PyTorch - YouTube Series
Webinars
Community
Landscape
Join the Ecosystem
Community Hub
Forums
Developer Resources
Contributor Awards
Community Events
PyTorch Ambassadors
Projects
PyTorch
vLLM
DeepSpeed
Host Your Project
Docs
PyTorch
Domains
Blog & News
Blog
Announcements
Case Studies
Events
Newsletter
About
PyTorch Foundation
Members
Governing Board
Technical Advisory Council
Cloud Credit Program
Staff
Contact
Skip to main content
Back to top
Ctrl+K
v2.8.0+cu128
Intro
Compilers
Domains
Distributed
Deep Dive
Extension
Ecosystem
Recipes
Ctrl+K
X
GitHub
Discourse
PyPi
Intro
Compilers
Domains
Distributed
Deep Dive
Extension
Ecosystem
Recipes
Ctrl+K
X
GitHub
Discourse
PyPi
Section Navigation
Getting Started with PyTorch
Learn the Basics
Quickstart
Tensors
Datasets & DataLoaders
Transforms
Build the Neural Network
Automatic Differentiation with torch.autograd
Optimizing Model Parameters
Save and Load the Model
Introduction to PyTorch - YouTube Series
Introduction to PyTorch
Introduction to PyTorch Tensors
The Fundamentals of Autograd
Building Models with PyTorch
PyTorch TensorBoard Support
Training with PyTorch
Model Understanding with Captum
Learning PyTorch
Deep Learning with PyTorch: A 60 Minute Blitz
Tensors
A Gentle Introduction to torch.autograd
Neural Networks
Training a Classifier
Learning PyTorch with Examples
Warm-up: numpy
PyTorch: Tensors
PyTorch: Tensors and autograd
PyTorch: Defining New autograd Functions
PyTorch: nn
PyTorch: optim
PyTorch: Custom nn Modules
PyTorch: Control Flow + Weight Sharing
What is torch.nn really?
Understanding requires_grad, retain_grad, Leaf, and Non-leaf Tensors
NLP from Scratch
Visualizing Models, Data, and Training with TensorBoard
A guide on good usage of non_blocking and pin_memory() in PyTorch
Visualizing Gradients
Intro
Learn the Basics
Rate this Page
★
★
★
★
★
beginner/basics/intro
Run in Google Colab
Colab
Download Notebook
Notebook
View on GitHub
GitHub
Note
Go to the end
to download the full example code.
Learn the Basics ||
Quickstart ||
Tensors ||
Datasets & DataLoaders ||
Transforms ||
Build Model ||
Autograd ||
Optimization ||
Save & Load Model
Learn the Basics#Created On: Feb 09, 2021 | Last Updated: Jul 07, 2025 | Last Verified: Nov 05, 2024
Authors:
Suraj Subramanian,
Seth Juarez,
Cassie Breviu,
Dmitry Soshnikov,
Ari Bornstein
Most machine learning workflows involve working with data, creating models, optimizing model
parameters, and saving the trained models. This tutorial introduces you to a complete ML workflow
implemented in PyTorch, with links to learn more about each of these concepts.
We’ll use the FashionMNIST dataset to train a neural network that predicts if an input image belongs
to one of the following classes: T-shirt/top, Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker,
Bag, or Ankle boot.
This tutorial assumes a basic familiarity with Python and Deep Learning concepts.
Running the Tutorial Code#
You can run this tutorial in a couple of ways:
In the cloud: This is the easiest way to get started! Each section has a “Run in Microsoft Learn” and “Run in Google Colab” link at the top, which opens an integrated notebook in Microsoft Learn or Google Colab, respectively, with the code in a fully-hosted environment.
Locally: This option requires you to setup PyTorch and TorchVision first on your local machine (installation instructions). Download the notebook or copy the code into your favorite IDE.
How to Use this Guide#
If you’re familiar with other deep learning frameworks, check out the 0. Quickstart first
to quickly familiarize yourself with PyTorch’s API.
If you’re new to deep learning frameworks, head right into the first section of our step-by-step guide: 1. Tensors.
0. Quickstart
1. Tensors
2. Datasets and DataLoaders
3. Transforms
4. Build Model
5. Automatic Differentiation
6. Optimization Loop
7. Save, Load and Use Model
Download Jupyter notebook: intro.ipynb
Download Python source code: intro.py
Download zipped: intro.zip
Rate this Page
★
★
★
★
★
Send Feedback
previous
Intro
next
Quickstart
© Copyright 2024, PyTorch.
Built with the PyData Sphinx Theme 0.15.4.
previous
Intro
next
Quickstart
On this page
Running the Tutorial Code
How to Use this Guide
PyTorch Libraries
torchao
torchrec
torchft
TorchCodec
torchvision
ExecuTorch
PyTorch on XLA Devices
Docs
Access comprehensive developer documentation for PyTorch
View Docs
Tutorials
Get in-depth tutorials for beginners and advanced developers
View Tutorials
Resources
Find development resources and get your questions answered
View Resources
Stay in touch for updates, event info, and
the latest news
By submitting this form, I consent to receive marketing emails from the LF and its
projects regarding their events, training, research, developments, and related announcements. I understand that
I can unsubscribe at any time using the links in the footers of the emails I receive. Privacy Policy.
© PyTorch. Copyright © The Linux Foundation®. All rights reserved. The Linux Foundation has registered
trademarks and uses trademarks. For more information, including terms of use, privacy policy, and trademark
usage, please see our Policies page. Trademark Usage. Privacy Policy.
To analyze traffic and optimize your experience, we serve cookies on this site. By clicking or navigating, you agree to allow our usage of cookies. As the current maintainers of this site, Facebook’s Cookies Policy applies. Learn more, including about available controls: Cookies Policy.
© Copyright 2024, PyTorch.
Created using Sphinx 7.2.6.
Built with the PyData Sphinx Theme 0.15.4.