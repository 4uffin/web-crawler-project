Visual programming is stuck on the form | Hacker NewsHacker Newsnew | past | comments | ask | show | jobs | submitloginVisual programming is stuck on the form (interjectedfuture.com)25 points by iamwil 6 hours ago
| hide | past | favorite | 11 comments
jayd16 38 minutes ago
| next [–]
The tone of the article feels really preachy and full of itself without even fully understanding why Blueprints work well for games.Killer features that come to mind are:You can drag and drop asset references instead of relying on textual tokens.You can build a framework where incorrect code does not fit together, or pins dont connect, or draggables do not allow for blocking.
It's a much better feedback to a certain type of person than a textual error.Then the article seems to go on and on about knowing how to make a great visual programming language despite not producing one.replygeneral1465 50 minutes ago
| prev | next [–]
From what is practically used - you have things like CoDeSys where you can program PLC or Matlab Simulink which is heavily used in science and in automotive development or infamous LabView spaghetti the moment when program will get just a little bit more complex.All are using blocks with input and output which are either having predefined function or you can define the block function with a code. Reading these programming schematics is sometimes great to understand the high level of how program is working with input data (left) towards output (right). However the moment you will introduce loops, visual programming will just fall apart like a glass hit by a hammer.replyaetherspawn 55 minutes ago
| prev | next [–]
It would be awesome if someone could fund a free open source version of Simulink (as a VSCode plugin or something like that) so that we can build normal software using model-based design. Games, shaders, ML, reactive UI, applications like these…Simulink is getting more expensive every year, and licensing is a huge barrier to open source models.Edit: basically, we want Dyad (https://juliahub.com/products/dyad) except free.replyspacebacon 1 hour ago
| prev | next [–]
Fundamentally underestimates the chaotic, exploratory essence of innovation. I challenge you to write the argument for form over function for good measure. Form follows function inside the box.replyindigoabstract 2 hours ago
| prev | next [–]
For some reason while reading this, I thought of Erlang, a language I know nothing about, except that it's not a visual language and it's build out (many) processes, kind of like a tiny internet with server and client nodes that can be taken down anytime for repairs or updates.Maybe there's an unobvious way to make visual programming actually useful?Probably quite a few people have wondered that throughout the ages. I know I have.In the meantime, this AI thing happened, emphasizing even more the use of text/voice as a mode of creative expression.replyTowaway69 1 hour ago
| parent | next [–]
Have a look at Erlang-Red[1] which uses Erlang for the basis of making a visual programming environment.Erlang-Red is inspired by Node-RED which itself is inspired by flow based programming.[1] https://github.com/gorenje/erlang-redDisclaimer: I’m the author of Erlang-Red.replysublinear 1 hour ago
| parent | prev | next [–]
> Maybe there's an unobvious way to make visual programming actually useful?I'd think it would be finding the optimal parameters for an algorithm that is probably better expressed in another language.Even though they are all Turing complete, any programming paradigm is biased towards solving certain kinds of problems.It seems "visual programming" is biased towards the computationally irreducable[1]. This is a class of problem very sensitive to initial conditions. The chaotic behavior may eventually settle towards a stable state. So, the image of that stable state then encodes the parameters you'd want to use on the algorithm you wrote in another language.That's not meant to be harsh. This gets directly to the heart of why we may want to write the same ideas in different ways even if those writings seem logically equivalent. One way is just easier to understand than the other depending on what part of the problem you're trying to tackle. These multiple writings are not redundant, but the facets necessary to more thoroughly explain a problem. In fact, upon closer inspection you'd find that what seems like the same algorithm written two different ways is actually not the same because they are executed differently.[1]: https://en.wikipedia.org/wiki/Computational_irreducibilityreplyboopity2025 1 hour ago
| prev | next [–]
Feels like visual programming keeps trying to be “code, but with pictures” instead of asking what problems pictures are actually good at solving. We’ve basically been drawing the same boxes and arrows since the 80s and wondering why it still feels like wiring up a VCR.If we really leaned into the visual cortex, maybe we’d get something where zooming out shows the big picture and zooming in shows the gritty details, like Google Maps for code. Until then, node‑and‑wire diagrams are just UML diagrams that decided to cosplay as circuit boards.replysublinear 25 minutes ago
| prev | next [–]
> That's how we get terrible interfaces where the end user needs to be aware of the data model to use it effectively, like Git.This is only true if you prefer whimsical metaphor over concise description and cleaning up unexpected behavior instead of precisely defining what you want upfront.replyAfterHIA 2 hours ago
| prev [–]
Dude fucking Google, "e-Toys and, "Mindstorms by Seymour Papert" and get back to me.#ted #nelson #engelbartreplyuncircle 1 hour ago
| parent [–]
I won’t comment on your tone and unterminated string quotes, but the link seems interesting enough to share: https://worrydream.com/refs/Papert_1980_-_Mindstorms,_1st_ed...reply
Guidelines | FAQ | Lists | API | Security | Legal | Apply to YC | Contact
Search: