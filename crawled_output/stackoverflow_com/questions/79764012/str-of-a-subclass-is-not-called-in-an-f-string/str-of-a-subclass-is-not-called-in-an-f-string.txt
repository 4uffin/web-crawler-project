python - `__str__` of a subclass is not called in an f-string - Stack Overflow
Skip to main content
Stack Overflow
About
Products
For Teams
Stack Overflow for Teams
Where developers & technologists share private knowledge with coworkers
Advertising
Reach devs & technologists worldwide about your product, service or employer brand
Knowledge Solutions
Data licensing offering for businesses to build and improve AI tools and models
Labs
The future of collective knowledge sharing
About the company
Visit the blog
Loading…
current community
Stack Overflow
help
chat
Meta Stack Overflow
your communities
Sign up or log in to customize your list.
more stack exchange communities
company blog
Log in
Sign up
Home
Questions
AI Assist
Labs
Tags
Challenges
Chat
Articles
Users
Jobs
Companies
Collectives
Communities for your favorite technologies.
Explore all Collectives
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Try Teams for free
Explore Teams
Teams
Ask questions, find answers and collaborate at work with Stack Overflow for Teams.
Explore Teams
Collectives™ on Stack Overflow
Find centralized, trusted content and collaborate around the technologies you use most.
Learn more about Collectives
Teams
Q&A for work
Connect and share knowledge within a single location that is structured and easy to search.
Learn more about Teams
`__str__` of a subclass is not called in an f-string
Ask Question
Asked
3 days ago
Modified
2 days ago
Viewed
128 times
3
I wrote a subclass of Decimal to represent an amount of money. I wrote a custom __str__ to display the currency along with a sign format. My method works when calling str() but in a f-string somehow my custom __str__ is not used. What is happening here?
More than workarounds, I'm interested in understanding what is happening here. Something is going on that defies my current understanding of
__str__, __format__ and inheritance. I thought the default behavior of format with no format specified was to delegate to str, but here it sends it to str of the parent class instead.
Here is the minimal code to reproduce:
from decimal import Decimal
class Money(Decimal):
CURRENCY = "€"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Decimal("0.01")))
def __str__(self):
return f"{self:+}{self.CURRENCY}"
m = Money(10)
print("Test 1 - str():", str(m))
print("Test 2 - print():", m)
print(f"Test 3 - f-string: {m}")
print("Test 4 - f-string str():", f"{str(m)}")
This results in
Test 1 - str(): +10.00€
Test 2 - print(): +10.00€
Test 3 - f-string: 10.00 # only here is my custom str not called
Test 4 - f-string str(): +10.00€
Python version is 3.13.7.
pythonf-string
Share
Improve this question
Follow
edited 2 days ago
Anerdw
2,73333 gold badges1818 silver badges4444 bronze badges
asked Sep 13 at 23:45
Antoine GallixAntoine Gallix
86822 gold badges1212 silver badges3232 bronze badges
2
1
Side note, you probably want to use composition over inheritance. Any method that you do not explicitly override will return a Decimal object rather than a Money object. This can be a pernicious source of bugs, as you might forget to override a less well known method of Decimal. Even operations as simple as +Money(0) will result in a Decimal object. See also methods (eg. Money(0).quantize(Money(0))), and implied operations (eg. round(Money(0), 3)) as well.
Dunes
–
Dunes
2025-09-14 09:55:21 +00:00
Commented
2 days ago
2
This question is similar to: f-string representation different than str(). If you believe it’s different, please edit the question, make it clear how it’s different and/or how the answers on that question are not helpful for your problem.
miken32
–
miken32
2025-09-16 23:03:03 +00:00
Commented
4 hours ago
Add a comment
|
3 Answers
3
Sorted by:
Reset to default
Highest score (default)
Trending (recent votes count more)
Date modified (newest first)
Date created (oldest first)
8
f-strings in Python prioritize __format__ over __str__. Since Money inherits from Decimal, you need to add __format__ to your class for expected behavior.
from decimal import Decimal
class Money(Decimal):
CURRENCY = "€"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Decimal("0.01")))
def __format__(self, format_spec: str) -> str:
if not format_spec:
format_spec = "+.2f"
formatted_number = super().__format__(format_spec)
return f"{formatted_number}{self.CURRENCY}"
def __str__(self) -> str:
formatted_number = super().__format__("+.2f")
return f"{formatted_number}{self.CURRENCY}"
Share
Improve this answer
Follow
edited Sep 14 at 0:35
answered Sep 14 at 0:04
pixel-processpixel-process
21666 bronze badges
New contributor
pixel-process is a new contributor to this site. Take care in asking for clarification, commenting, and answering.
Check out our Code of Conduct.
Comments
Add a comment
2
The __format__ method is not meant to be called explicitly as pointed out in this post
I would suggest:
from decimal import Decimal
class Money(Decimal):
QUANT = Decimal("0.01")
FORMAT = "+.2f"
def __new__(cls, number):
return super().__new__(cls, Decimal(number).quantize(Money.QUANT))
def __format__(self, format_spec):
return super().__format__(format_spec or Money.FORMAT) + "€"
def __str__(self):
return f"{self:{Money.FORMAT}}"
money = Money("1.123")
print(f"{money}")
print(f"{money:+.4f}")
print(money)
Output:
+1.12€
+1.1200€
+1.12€
Share
Improve this answer
Follow
answered 2 days ago
RamrabRamrab
28.8k33 gold badges99 silver badges2727 bronze badges
Comments
Add a comment
0
First, you should know the whole process
F-strings use __format__() method, not directly __str__()
When __format__() is not defined, Python falls back to str()
If a parent class defines __format__(), it takes precedence over the subclass's __str__()
Use !s specifier to force string conversion: f"{obj!s}"
The most robust solution is to override __format__() in your subclass
So you can use these solutions to fix your problem
Override __format__ method
class Parent:
def __str__(self):
return "Parent string"
def __format__(self, format_spec):
return str(self)
class Child(Parent):
def __str__(self):
return "Child string"
def __format__(self, format_spec):
return str(self)
# This ensures __str__ is called
# Test
child = Child()
print(f"{child}")
# Output: Child string
Share
Improve this answer
Follow
edited 2 days ago
Serge Ballesta
150k1313 gold badges136136 silver badges267267 bronze badges
answered 2 days ago
Marc StevenMarc Steven
56055 silver badges1717 bronze badges
1 Comment
Add a comment
Ramrab Ramrab yesterday
But this doesn't facilitate any kind of formatting. For example print(f"{child:>16}") 2025-09-15T14:29:26.707Z+00:00
1
Reply
Copy link
Your Answer
Thanks for contributing an answer to Stack Overflow!Please be sure to answer the question. Provide details and share your research!But avoid …Asking for help, clarification, or responding to other answers.Making statements based on opinion; back them up with references or personal experience.To learn more, see our tips on writing great answers.
Draft saved
Draft discarded
Sign up or log in
Sign up using Google
Sign up using Email and Password
Submit
Post as a guest
Name
Email
Required, but never shown
Post as a guest
Name
Email
Required, but never shown
Post Your Answer
Discard
By clicking “Post Your Answer”, you agree to our terms of service and acknowledge you have read our privacy policy.
Start asking to get answers
Find the answer to your question by asking.
Ask question
Explore related questions
pythonf-string
See similar questions with these tags.
The Overflow Blog
Planning to Arm mobile devices with chips that handle AI
What an MCP implementation looks like at a CRM company
Featured on Meta
Community Asks Sprint Announcement - September 2025
stackoverflow.ai - rebuilt for attribution
Policy: Generative AI (e.g., ChatGPT) is banned
New comment UI experiment graduation
New and improved coding challenges
Linked
75
f-string representation different than str()
1
Is there a way to override __format__ method
Related
3814
What is the difference between __str__ and __repr__?
3875
Convert bytes to a string in Python 3
3586
Does Python have a string 'contains' substring method?
1468
String formatting: % vs. .format vs. f-string literal
3000
Convert string "Jun 1 2005 1:33PM" into datetime
2578
How do I lowercase a string in Python?
2773
How do I parse a string to a float or int?
2491
Calling a function of a module by using its name (a string)
2245
How do I pad a string with zeros?
2705
How do I escape curly-brace ({}) characters characters in a string while using .format?
Hot Network Questions
For two normally distributed variables X and Y, does Spearman correlation imply Pearson correlation and vice versa?
Should beginner writers publish short story science fiction on Amazon short reads to get experience?
How to draw the Ketamine molecular structure using ChemFig?
Memory mapped file interface for linux
SquidSquad - how to use WildernessGenerator and Biomes
Peg solitaire starting position
Sorting a dynamic array in Excel
Why do complex questions lead to simple elegant answers?
Defining a verbatim environment as a pair of commands (e.g., using c argspec), with optional argument
Why is the Bonferroni correction needed?
Siblings buying grandparents' home as first time buyers. Please help me identify our blind spots
What is the probability of coming out ahead in the iterated alternating St. Petersburg gamble?
List<T>.ForEach does not invoke the action HashCode.Add<T>
"But I'll miss the bus for my game!" what is a teacher's legal liability for letting kids out of class without confirmation?
Are we allowed to use ISM bands for broadcast radio, television, or data?
Are Africans and other ethnic groups more genetically different than dogs and coyotes?
Vertical dashed lines in tikz. Figure from Proofs Without Words
How is phase volume calculated in microstate counting (microcanonical ensemble)?
What keeps cotton thread together and why does old cotton thread becomes easily teared apart?
append iterator value to variable in for loop
How many of each type of dice could you possibly need?
Can tubeless rim tape cause a puncture near a tube valve stem?
Travelling to the US with a visa: do airlines check the physical visa, or is API enough?
Context-freeness of the language of composite (non-primitive) words?
more hot questions
Question feed
Subscribe to RSS
Question feed
To subscribe to this RSS feed, copy and paste this URL into your RSS reader.
lang-py
Stack Overflow
Questions
Help
Chat
Products
Teams
Advertising
Talent
Company
About
Press
Work Here
Legal
Privacy Policy
Terms of Service
Contact Us
Your Privacy Choices
Cookie Policy
Stack Exchange Network
Technology
Culture & recreation
Life & arts
Science
Professional
Business
API
Data
Blog
Facebook
Twitter
LinkedIn
Instagram
Site design / logo © 2025 Stack Exchange Inc;
user contributions licensed under
CC BY-SA
.
rev 2025.9.15.33996